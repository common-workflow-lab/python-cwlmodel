[
    {
        "doc": "## References to other specifications\n\n**Javascript Object Notation (JSON)**: http://json.org\n\n**JSON Linked Data (JSON-LD)**: http://json-ld.org\n\n**YAML**: http://yaml.org\n\n**Avro**: https://avro.apache.org/docs/1.8.1/spec.html\n\n**Uniform Resource Identifier (URI) Generic Syntax**: https://tools.ietf.org/html/rfc3986)\n\n**Internationalized Resource Identifiers (IRIs)**:\nhttps://tools.ietf.org/html/rfc3987\n\n**Portable Operating System Interface (POSIX.1-2008)**: http://pubs.opengroup.org/onlinepubs/9699919799/\n\n**Resource Description Framework (RDF)**: http://www.w3.org/RDF/\n\n## Scope\n\nThis document describes CWL syntax, execution, and object model.  It\nis not intended to document a CWL specific implementation, however it may\nserve as a reference for the behavior of conforming implementations.\n\n## Terminology\n\nThe terminology used to describe CWL documents is defined in the\nConcepts section of the specification. The terms defined in the\nfollowing list are used in building those definitions and in describing the\nactions of a CWL implementation:\n\n**may**: Conforming CWL documents and CWL implementations are permitted but\nnot required to behave as described.\n\n**must**: Conforming CWL documents and CWL implementations are required to behave\nas described; otherwise they are in error.\n\n**error**: A violation of the rules of this specification; results are\nundefined. Conforming implementations may detect and report an error and may\nrecover from it.\n\n**fatal error**: A violation of the rules of this specification; results are\nundefined. Conforming implementations must not continue to execute the current\nprocess and may report an error.\n\n**at user option**: Conforming software may or must (depending on the modal verb in\nthe sentence) behave as described; if it does, it must provide users a means to\nenable or disable the behavior described.\n\n**deprecated**: Conforming software may implement a behavior for backwards\ncompatibility.  Portable CWL documents should not rely on deprecated behavior.\nBehavior marked as deprecated may be removed entirely from future revisions of\nthe CWL specification.\n\n# Data model\n\n## Data concepts\n\nAn **object** is a data structure equivalent to the \"object\" type in JSON,\nconsisting of a unordered set of name/value pairs (referred to here as\n**fields**) and where the name is a string and the value is a string, number,\nboolean, array, or object.\n\nA **document** is a file containing a serialized object, or an array of objects.\n\nA **process** is a basic unit of computation which accepts input data,\nperforms some computation, and produces output data. Examples include\nCommandLineTools, Workflows, and ExpressionTools.\n\nAn **input object** is an object describing the inputs to an invocation of\na process.\n\nAn **output object** is an object describing the output resulting from an\ninvocation of a process.\n\nAn **input schema** describes the valid format (required fields, data types)\nfor an input object.\n\nAn **output schema** describes the valid format for an output object.\n\n**Metadata** is information about workflows, tools, or input items.\n\n## Syntax\n\nCWL documents must consist of an object or array of objects represented using\nJSON or YAML syntax.  Upon loading, a CWL implementation must apply the\npreprocessing steps described in the\n[Semantic Annotations for Linked Avro Data (SALAD) Specification](SchemaSalad.html).\nAn implementation may formally validate the structure of a CWL document using\nSALAD schemas located at\nhttps://github.com/common-workflow-language/common-workflow-language/tree/master/v1.0\n\n## Identifiers\n\nIf an object contains an `id` field, that is used to uniquely identify the\nobject in that document.  The value of the `id` field must be unique over the\nentire document.  Identifiers may be resolved relative to either the document\nbase and/or other identifiers following the rules are described in the\n[Schema Salad specification](SchemaSalad.html#Identifier_resolution).\n\nAn implementation may choose to only honor references to object types for\nwhich the `id` field is explicitly listed in this specification.\n\n## Document preprocessing\n\nAn implementation must resolve [$import](SchemaSalad.html#Import) and\n[$include](SchemaSalad.html#Import) directives as described in the\n[Schema Salad specification](SchemaSalad.html).\n\nAnother transformation defined in Schema salad is simplification of data type definitions.\nType `<T>` ending with `?` should be transformed to `[<T>, \"null\"]`.\nType `<T>` ending with `[]` should be transformed to `{\"type\": \"array\", \"items\": <T>}`\n\n## Extensions and metadata\n\nInput metadata (for example, a lab sample identifier) may be represented within\na tool or workflow using input parameters which are explicitly propagated to\noutput.  Future versions of this specification may define additional facilities\nfor working with input/output metadata.\n\nImplementation extensions not required for correct execution (for example,\nfields related to GUI presentation) and metadata about the tool or workflow\nitself (for example, authorship for use in citations) may be provided as\nadditional fields on any object.  Such extensions fields must use a namespace\nprefix listed in the `$namespaces` section of the document as described in the\n[Schema Salad specification](SchemaSalad.html#Explicit_context).\n\nImplementation extensions which modify execution semantics must be [listed in\nthe `requirements` field](#Requirements_and_hints).\n\n# Execution model\n\n## Execution concepts\n\nA **parameter** is a named symbolic input or output of process, with an\nassociated datatype or schema.  During execution, values are assigned to\nparameters to make the input object or output object used for concrete\nprocess invocation.\n\nA **CommandLineTool** is a process characterized by the execution of a\nstandalone, non-interactive program which is invoked on some input,\nproduces output, and then terminates.\n\nA **workflow** is a process characterized by multiple subprocess steps,\nwhere step outputs are connected to the inputs of downstream steps to\nform a directed acylic graph, and independent steps may run concurrently.\n\nA **runtime environment** is the actual hardware and software environment when\nexecuting a command line tool.  It includes, but is not limited to, the\nhardware architecture, hardware resources, operating system, software runtime\n(if applicable, such as the specific Python interpreter or the specific Java\nvirtual machine), libraries, modules, packages, utilities, and data files\nrequired to run the tool.\n\nA **workflow platform** is a specific hardware and software implementation\ncapable of interpreting CWL documents and executing the processes specified by\nthe document.  The responsibilities of the workflow platform may include\nscheduling process invocation, setting up the necessary runtime environment,\nmaking input data available, invoking the tool process, and collecting output.\n\nA workflow platform may choose to only implement the Command Line Tool\nDescription part of the CWL specification.\n\nIt is intended that the workflow platform has broad leeway outside of this\nspecification to optimize use of computing resources and enforce policies\nnot covered by this specification.  Some areas that are currently out of\nscope for CWL specification but may be handled by a specific workflow\nplatform include:\n\n* Data security and permissions\n* Scheduling tool invocations on remote cluster or cloud compute nodes.\n* Using virtual machines or operating system containers to manage the runtime\n(except as described in [DockerRequirement](CommandLineTool.html#DockerRequirement)).\n* Using remote or distributed file systems to manage input and output files.\n* Transforming file paths.\n* Determining if a process has previously been executed, and if so skipping it\nand reusing previous results.\n* Pausing, resuming or checkpointing processes or workflows.\n\nConforming CWL processes must not assume anything about the runtime\nenvironment or workflow platform unless explicitly declared though the use\nof [process requirements](#Requirements_and_hints).\n\n## Generic execution process\n\nThe generic execution sequence of a CWL process (including workflows and\ncommand line line tools) is as follows.\n\n1. Load, process and validate a CWL document, yielding a process object.\n2. Load input object.\n3. Validate the input object against the `inputs` schema for the process.\n4. Validate process requirements are met.\n5. Perform any further setup required by the specific process type.\n6. Execute the process.\n7. Capture results of process execution into the output object.\n8. Validate the output object against the `outputs` schema for the process.\n9. Report the output object to the process caller.\n\n## Requirements and hints\n\nA **process requirement** modifies the semantics or runtime\nenvironment of a process.  If an implementation cannot satisfy all\nrequirements, or a requirement is listed which is not recognized by the\nimplementation, it is a fatal error and the implementation must not attempt\nto run the process, unless overridden at user option.\n\nA **hint** is similar to a requirement; however, it is not an error if an\nimplementation cannot satisfy all hints.  The implementation may report a\nwarning if a hint cannot be satisfied.\n\nRequirements are inherited.  A requirement specified in a Workflow applies\nto all workflow steps; a requirement specified on a workflow step will\napply to the process implementation of that step and any of its substeps.\n\nIf the same process requirement appears at different levels of the\nworkflow, the most specific instance of the requirement is used, that is,\nan entry in `requirements` on a process implementation such as\nCommandLineTool will take precedence over an entry in `requirements`\nspecified in a workflow step, and an entry in `requirements` on a workflow\nstep takes precedence over the workflow.  Entries in `hints` are resolved\nthe same way.\n\nRequirements override hints.  If a process implementation provides a\nprocess requirement in `hints` which is also provided in `requirements` by\nan enclosing workflow or workflow step, the enclosing `requirements` takes\nprecedence.\n\n## Parameter references\n\nParameter references are denoted by the syntax `$(...)` and may be used in any\nfield permitting the pseudo-type `Expression`, as specified by this document.\nConforming implementations must support parameter references.  Parameter\nreferences use the following subset of\n[Javascript/ECMAScript 5.1](http://www.ecma-international.org/ecma-262/5.1/)\nsyntax, but they are designed to not require a Javascript engine for evaluation.\n\nIn the following BNF grammar, character classes, and grammar rules are denoted\nin '{}', '-' denotes exclusion from a character class, '(())' denotes grouping,\n'|' denotes alternates, trailing '*' denotes zero or more repeats, '+' denote\none or more repeats, '/' escapes these special characters, and all other\ncharacters are literal values.\n\n<p>\n<table class=\"table\">\n<tr><td>symbol::             </td><td>{Unicode alphanumeric}+</td></tr>\n<tr><td>singleq::            </td><td>[' (( {character - '} | \\' ))* ']</td></tr>\n<tr><td>doubleq::            </td><td>[\" (( {character - \"} | \\\" ))* \"]</td></tr>\n<tr><td>index::              </td><td>[ {decimal digit}+ ]</td></tr>\n<tr><td>segment::            </td><td>. {symbol} | {singleq} | {doubleq} | {index}</td></tr>\n<tr><td>parameter reference::</td><td>$( {symbol} {segment}*)</td></tr>\n</table>\n</p>\n\nUse the following algorithm to resolve a parameter reference:\n\n  1. Match the leading symbol as the key\n  2. Look up the key in the parameter context (described below) to get the current value.\n     It is an error if the key is not found in the parameter context.\n  3. If there are no subsequent segments, terminate and return current value\n  4. Else, match the next segment\n  5. Extract the symbol, string, or index from the segment as the key\n  6. Look up the key in current value and assign as new current value.  If\n     the key is a symbol or string, the current value must be an object.\n     If the key is an index, the current value must be an array or string.\n     It is an error if the key does not match the required type, or the key is not found or out\n     of range.\n  7. Repeat steps 3-6\n\nThe root namespace is the parameter context.  The following parameters must\nbe provided:\n\n  * `inputs`: The input object to the current Process.\n  * `self`: A context-specific value.  The contextual values for 'self' are\n    documented for specific fields elsewhere in this specification.  If\n    a contextual value of 'self' is not documented for a field, it\n    must be 'null'.\n  * `runtime`: An object containing configuration details.  Specific to the\n    process type.  An implementation may provide\n    opaque strings for any or all fields of `runtime`.  These must be\n    filled in by the platform after processing the Tool but before actual\n    execution.  Parameter references and expressions may only use the\n    literal string value of the field and must not perform computation on\n    the contents, except where noted otherwise.\n\nIf the value of a field has no leading or trailing non-whitespace\ncharacters around a parameter reference, the effective value of the field\nbecomes the value of the referenced parameter, preserving the return type.\n\nIf the value of a field has non-whitespace leading or trailing characters\naround a parameter reference, it is subject to string interpolation.  The\neffective value of the field is a string containing the leading characters,\nfollowed by the string value of the parameter reference, followed by the\ntrailing characters.  The string value of the parameter reference is its\ntextual JSON representation with the following rules:\n\n  * Leading and trailing quotes are stripped from strings\n  * Objects entries are sorted by key\n\nMultiple parameter references may appear in a single field.  This case\nmust be treated as a string interpolation.  After interpolating the first\nparameter reference, interpolation must be recursively applied to the\ntrailing characters to yield the final string value.\n\n## Expressions\n\nAn expression is a fragment of [Javascript/ECMAScript\n5.1](http://www.ecma-international.org/ecma-262/5.1/) code evaluated by the\nworkflow platform to affect the inputs, outputs, or\nbehavior of a process.  In the generic execution sequence, expressions may\nbe evaluated during step 5 (process setup), step 6 (execute process),\nand/or step 7 (capture output).  Expressions are distinct from regular\nprocesses in that they are intended to modify the behavior of the workflow\nitself rather than perform the primary work of the workflow.\n\nTo declare the use of expressions, the document must include the process\nrequirement `InlineJavascriptRequirement`.  Expressions may be used in any\nfield permitting the pseudo-type `Expression`, as specified by this\ndocument.\n\nExpressions are denoted by the syntax `$(...)` or `${...}`.  A code\nfragment wrapped in the `$(...)` syntax must be evaluated as a\n[ECMAScript expression](http://www.ecma-international.org/ecma-262/5.1/#sec-11).  A\ncode fragment wrapped in the `${...}` syntax must be evaluated as a\n[EMACScript function body](http://www.ecma-international.org/ecma-262/5.1/#sec-13)\nfor an anonymous, zero-argument function.  Expressions must return a valid JSON\ndata type: one of null, string, number, boolean, array, object. Other return\nvalues must result in a `permanentFailure`. Implementations must permit any\nsyntactically valid Javascript and account for nesting of parenthesis or braces\nand that strings that may contain parenthesis or braces when scanning for\nexpressions.\n\nThe runtime must include any code defined in the [\"expressionLib\" field of\nInlineJavascriptRequirement](#InlineJavascriptRequirement) prior to\nexecuting the actual expression.\n\nBefore executing the expression, the runtime must initialize as global\nvariables the fields of the parameter context described above.\n\nThe effective value of the field after expression evaluation follows the\nsame rules as parameter references discussed above.  Multiple expressions\nmay appear in a single field.\n\nExpressions must be evaluated in an isolated context (a \"sandbox\") which\npermits no side effects to leak outside the context.  Expressions also must\nbe evaluated in [Javascript strict mode](http://www.ecma-international.org/ecma-262/5.1/#sec-4.2.2).\n\nThe order in which expressions are evaluated is undefined except where\notherwise noted in this document.\n\nAn implementation may choose to implement parameter references by\nevaluating as a Javascript expression.  The results of evaluating\nparameter references must be identical whether implemented by Javascript\nevaluation or some other means.\n\nImplementations may apply other limits, such as process isolation, timeouts,\nand operating system containers/jails to minimize the security risks associated\nwith running untrusted code embedded in a CWL document.\n\nExceptions thrown from an exception must result in a `permanentFailure` of the\nprocess.\n\n## Executing CWL documents as scripts\n\nBy convention, a CWL document may begin with `#!/usr/bin/env cwl-runner`\nand be marked as executable (the POSIX \"+x\" permission bits) to enable it\nto be executed directly.  A workflow platform may support this mode of\noperation; if so, it must provide `cwl-runner` as an alias for the\nplatform's CWL implementation.\n\nA CWL input object document may similarly begin with `#!/usr/bin/env\ncwl-runner` and be marked as executable.  In this case, the input object\nmust include the field `cwl:tool` supplying an IRI to the default CWL\ndocument that should be executed using the fields of the input object as\ninput parameters.\n\n## Discovering CWL documents on a local filesystem\n\nTo discover CWL documents look in the following locations:\n\n`/usr/share/commonwl/`\n\n`/usr/local/share/commonwl/`\n\n`$XDG_DATA_HOME/commonwl/` (usually `$HOME/.local/share/commonwl`)\n\n`$XDF_DATA_HOME` is from the [XDG Base Directory\nSpecification](http://standards.freedesktop.org/basedir-spec/basedir-spec-0.6.html)\n", 
        "type": "documentation", 
        "name": "https://w3id.org/cwl/cwl#Common Workflow Language, v1.0"
    }, 
    {
        "symbols": [
            "https://w3id.org/cwl/salad#null", 
            "http://www.w3.org/2001/XMLSchema#boolean", 
            "http://www.w3.org/2001/XMLSchema#int", 
            "http://www.w3.org/2001/XMLSchema#long", 
            "http://www.w3.org/2001/XMLSchema#float", 
            "http://www.w3.org/2001/XMLSchema#double", 
            "http://www.w3.org/2001/XMLSchema#string"
        ], 
        "doc": [
            "Salad data types are based on Avro schema declarations.  Refer to the\n[Avro schema declaration documentation](https://avro.apache.org/docs/current/spec.html#schemas) for\ndetailed information.\n", 
            "null: no value", 
            "boolean: a binary value", 
            "int: 32-bit signed integer", 
            "long: 64-bit signed integer", 
            "float: single precision (32-bit) IEEE 754 floating-point number", 
            "double: double precision (64-bit) IEEE 754 floating-point number", 
            "string: Unicode character sequence"
        ], 
        "type": "enum", 
        "name": "https://w3id.org/cwl/salad#PrimitiveType"
    }, 
    {
        "symbols": [
            "https://w3id.org/cwl/salad#Any"
        ], 
        "doc": "The **Any** type validates for any non-null value.\n", 
        "type": "enum", 
        "name": "https://w3id.org/cwl/salad#Any"
    }, 
    {
        "doc": "A field of a record.", 
        "type": "record", 
        "name": "https://w3id.org/cwl/salad#RecordField", 
        "fields": [
            {
                "doc": "The name of the field\n", 
                "jsonldPredicate": "@id", 
                "type": "string", 
                "name": "https://w3id.org/cwl/salad#RecordField/name"
            }, 
            {
                "doc": "A documentation string for this field\n", 
                "jsonldPredicate": "rdfs:comment", 
                "type": [
                    "null", 
                    "string"
                ], 
                "name": "https://w3id.org/cwl/salad#RecordField/doc"
            }, 
            {
                "doc": "The field type\n", 
                "jsonldPredicate": {
                    "refScope": 2, 
                    "_type": "@vocab", 
                    "_id": "https://w3id.org/cwl/salad#type", 
                    "typeDSL": true
                }, 
                "type": [
                    "https://w3id.org/cwl/salad#PrimitiveType", 
                    "RecordSchema", 
                    "EnumSchema", 
                    "ArraySchema", 
                    "string", 
                    {
                        "items": [
                            "https://w3id.org/cwl/salad#PrimitiveType", 
                            "RecordSchema", 
                            "EnumSchema", 
                            "ArraySchema", 
                            "string"
                        ], 
                        "type": "array"
                    }
                ], 
                "name": "https://w3id.org/cwl/salad#RecordField/type"
            }
        ]
    }, 
    {
        "fields": [
            {
                "doc": "Defines the fields of the record.", 
                "jsonldPredicate": {
                    "_id": "https://w3id.org/cwl/salad#fields", 
                    "mapSubject": "name", 
                    "mapPredicate": "type"
                }, 
                "type": [
                    "null", 
                    {
                        "items": "RecordField", 
                        "type": "array"
                    }
                ], 
                "name": "https://w3id.org/cwl/salad#RecordSchema/fields"
            }, 
            {
                "doc": "Must be `record`", 
                "jsonldPredicate": {
                    "refScope": 2, 
                    "_type": "@vocab", 
                    "_id": "https://w3id.org/cwl/salad#type", 
                    "typeDSL": true
                }, 
                "type": {
                    "symbols": [
                        "https://w3id.org/cwl/salad#record"
                    ], 
                    "type": "enum", 
                    "name": "https://w3id.org/cwl/salad#RecordSchema/type/Record_symbol"
                }, 
                "name": "https://w3id.org/cwl/salad#RecordSchema/type"
            }
        ], 
        "type": "record", 
        "name": "https://w3id.org/cwl/salad#RecordSchema"
    }, 
    {
        "doc": "Define an enumerated type.\n", 
        "type": "record", 
        "name": "https://w3id.org/cwl/salad#EnumSchema", 
        "fields": [
            {
                "doc": "Defines the set of valid symbols.", 
                "jsonldPredicate": {
                    "_type": "@id", 
                    "_id": "https://w3id.org/cwl/salad#symbols", 
                    "identity": true
                }, 
                "type": {
                    "items": "string", 
                    "type": "array"
                }, 
                "name": "https://w3id.org/cwl/salad#EnumSchema/symbols"
            }, 
            {
                "doc": "Must be `enum`", 
                "jsonldPredicate": {
                    "refScope": 2, 
                    "_type": "@vocab", 
                    "_id": "https://w3id.org/cwl/salad#type", 
                    "typeDSL": true
                }, 
                "type": {
                    "symbols": [
                        "https://w3id.org/cwl/salad#enum"
                    ], 
                    "type": "enum", 
                    "name": "https://w3id.org/cwl/salad#EnumSchema/type/Enum_symbol"
                }, 
                "name": "https://w3id.org/cwl/salad#EnumSchema/type"
            }
        ]
    }, 
    {
        "fields": [
            {
                "doc": "Defines the type of the array elements.", 
                "jsonldPredicate": {
                    "refScope": 2, 
                    "_type": "@vocab", 
                    "_id": "https://w3id.org/cwl/salad#items"
                }, 
                "type": [
                    "https://w3id.org/cwl/salad#PrimitiveType", 
                    "RecordSchema", 
                    "EnumSchema", 
                    "ArraySchema", 
                    "string", 
                    {
                        "items": [
                            "https://w3id.org/cwl/salad#PrimitiveType", 
                            "RecordSchema", 
                            "EnumSchema", 
                            "ArraySchema", 
                            "string"
                        ], 
                        "type": "array"
                    }
                ], 
                "name": "https://w3id.org/cwl/salad#ArraySchema/items"
            }, 
            {
                "doc": "Must be `array`", 
                "jsonldPredicate": {
                    "refScope": 2, 
                    "_type": "@vocab", 
                    "_id": "https://w3id.org/cwl/salad#type", 
                    "typeDSL": true
                }, 
                "type": {
                    "symbols": [
                        "https://w3id.org/cwl/salad#array"
                    ], 
                    "type": "enum", 
                    "name": "https://w3id.org/cwl/salad#ArraySchema/type/Array_symbol"
                }, 
                "name": "https://w3id.org/cwl/salad#ArraySchema/type"
            }
        ], 
        "type": "record", 
        "name": "https://w3id.org/cwl/salad#ArraySchema"
    }, 
    {
        "doc": "## Base types\n", 
        "docChild": [
            "https://w3id.org/cwl/cwl#CWLType", 
            "https://w3id.org/cwl/cwl#Process"
        ], 
        "name": "https://w3id.org/cwl/cwl#BaseTypesDoc", 
        "type": "documentation"
    }, 
    {
        "symbols": [
            "https://w3id.org/cwl/cwl#draft-2", 
            "https://w3id.org/cwl/cwl#draft-3.dev1", 
            "https://w3id.org/cwl/cwl#draft-3.dev2", 
            "https://w3id.org/cwl/cwl#draft-3.dev3", 
            "https://w3id.org/cwl/cwl#draft-3.dev4", 
            "https://w3id.org/cwl/cwl#draft-3.dev5", 
            "https://w3id.org/cwl/cwl#draft-3", 
            "https://w3id.org/cwl/cwl#draft-4.dev1", 
            "https://w3id.org/cwl/cwl#draft-4.dev2", 
            "https://w3id.org/cwl/cwl#draft-4.dev3", 
            "https://w3id.org/cwl/cwl#v1.0.dev4", 
            "https://w3id.org/cwl/cwl#v1.0"
        ], 
        "doc": "Version symbols for published CWL document versions.", 
        "type": "enum", 
        "name": "https://w3id.org/cwl/cwl#CWLVersion"
    }, 
    {
        "symbols": [
            "https://w3id.org/cwl/cwl#File", 
            "https://w3id.org/cwl/cwl#Directory"
        ], 
        "type": "enum", 
        "extends": "https://w3id.org/cwl/salad#PrimitiveType", 
        "name": "https://w3id.org/cwl/cwl#CWLType", 
        "doc": [
            "Extends primitive types with the concept of a file and directory as a builtin type.", 
            "File: A File object", 
            "Directory: A Directory object"
        ]
    }, 
    {
        "doc": "Represents a file (or group of files if `secondaryFiles` is specified) that\nmust be accessible by tools using standard POSIX file system call API such as\nopen(2) and read(2).\n", 
        "docParent": "https://w3id.org/cwl/cwl#CWLType", 
        "type": "record", 
        "name": "https://w3id.org/cwl/cwl#File", 
        "fields": [
            {
                "doc": "Must be `File` to indicate this object describes a file.", 
                "jsonldPredicate": {
                    "_type": "@vocab", 
                    "_id": "@type"
                }, 
                "type": {
                    "symbols": [
                        "https://w3id.org/cwl/cwl#File"
                    ], 
                    "type": "enum", 
                    "name": "https://w3id.org/cwl/cwl#File/class/File_class"
                }, 
                "name": "https://w3id.org/cwl/cwl#File/class"
            }, 
            {
                "doc": "An IRI that identifies the file resource.  This may be a relative\nreference, in which case it must be resolved using the base IRI of the\ndocument.  The location may refer to a local or remote resource; the\nimplementation must use the IRI to retrieve file content.  If an\nimplementation is unable to retrieve the file content stored at a\nremote resource (due to unsupported protocol, access denied, or other\nissue) it must signal an error.\n\nIf the `location` field is not provided, the `contents` field must be\nprovided.  The implementation must assign a unique identifier for\nthe `location` field.\n\nIf the `path` field is provided but the `location` field is not, an\nimplementation may assign the value of the `path` field to `location`,\nthen follow the rules above.\n", 
                "jsonldPredicate": {
                    "_type": "@id", 
                    "_id": "@id"
                }, 
                "type": [
                    "null", 
                    "string"
                ], 
                "name": "https://w3id.org/cwl/cwl#File/location"
            }, 
            {
                "doc": "The local host path where the File is available when a CommandLineTool is\nexecuted.  This field must be set by the implementation.  The final\npath component must match the value of `basename`.  This field\nmust not be used in any other context.  The command line tool being\nexecuted must be able to to access the file at `path` using the POSIX\n`open(2)` syscall.\n\nAs a special case, if the `path` field is provided but the `location`\nfield is not, an implementation may assign the value of the `path`\nfield to `location`, and remove the `path` field.\n\nIf the `path` contains [POSIX shell metacharacters](http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_02)\n(`|`,`&`, `;`, `<`, `>`, `(`,`)`, `$`,`` ` ``, `\\`, `\"`, `'`,\n`<space>`, `<tab>`, and `<newline>`) or characters\n[not allowed](http://www.iana.org/assignments/idna-tables-6.3.0/idna-tables-6.3.0.xhtml)\nfor [Internationalized Domain Names for Applications](https://tools.ietf.org/html/rfc6452)\nthen implementations may terminate the process with a\n`permanentFailure`.\n", 
                "jsonldPredicate": {
                    "_type": "@id", 
                    "_id": "https://w3id.org/cwl/cwl#path"
                }, 
                "type": [
                    "null", 
                    "string"
                ], 
                "name": "https://w3id.org/cwl/cwl#File/path"
            }, 
            {
                "doc": "The base name of the file, that is, the name of the file without any\nleading directory path.  The base name must not contain a slash `/`.\n\nIf not provided, the implementation must set this field based on the\n`location` field by taking the final path component after parsing\n`location` as an IRI.  If `basename` is provided, it is not required to\nmatch the value from `location`.\n\nWhen this file is made available to a CommandLineTool, it must be named\nwith `basename`, i.e. the final component of the `path` field must match\n`basename`.\n", 
                "jsonldPredicate": "cwl:basename", 
                "type": [
                    "null", 
                    "string"
                ], 
                "name": "https://w3id.org/cwl/cwl#File/basename"
            }, 
            {
                "doc": "The name of the directory containing file, that is, the path leading up\nto the final slash in the path such that `dirname + '/' + basename ==\npath`.\n\nThe implementation must set this field based on the value of `path`\nprior to evaluating parameter references or expressions in a\nCommandLineTool document.  This field must not be used in any other\ncontext.\n", 
                "type": [
                    "null", 
                    "string"
                ], 
                "name": "https://w3id.org/cwl/cwl#File/dirname"
            }, 
            {
                "doc": "The basename root such that `nameroot + nameext == basename`, and\n`nameext` is empty or begins with a period and contains at most one\nperiod.  For the purposess of path splitting leading periods on the\nbasename are ignored; a basename of `.cshrc` will have a nameroot of\n`.cshrc`.\n\nThe implementation must set this field automatically based on the value\nof `basename` prior to evaluating parameter references or expressions.\n", 
                "type": [
                    "null", 
                    "string"
                ], 
                "name": "https://w3id.org/cwl/cwl#File/nameroot"
            }, 
            {
                "doc": "The basename extension such that `nameroot + nameext == basename`, and\n`nameext` is empty or begins with a period and contains at most one\nperiod.  Leading periods on the basename are ignored; a basename of\n`.cshrc` will have an empty `nameext`.\n\nThe implementation must set this field automatically based on the value\nof `basename` prior to evaluating parameter references or expressions.\n", 
                "type": [
                    "null", 
                    "string"
                ], 
                "name": "https://w3id.org/cwl/cwl#File/nameext"
            }, 
            {
                "doc": "Optional hash code for validating file integrity.  Currently must be in the form\n\"sha1$ + hexadecimal string\" using the SHA-1 algorithm.\n", 
                "type": [
                    "null", 
                    "string"
                ], 
                "name": "https://w3id.org/cwl/cwl#File/checksum"
            }, 
            {
                "doc": "Optional file size", 
                "type": [
                    "null", 
                    "long"
                ], 
                "name": "https://w3id.org/cwl/cwl#File/size"
            }, 
            {
                "doc": "A list of additional files that are associated with the primary file\nand must be transferred alongside the primary file.  Examples include\nindexes of the primary file, or external references which must be\nincluded when loading primary document.  A file object listed in\n`secondaryFiles` may itself include `secondaryFiles` for which the same\nrules apply.\n", 
                "jsonldPredicate": "cwl:secondaryFiles", 
                "type": [
                    "null", 
                    {
                        "items": [
                            "https://w3id.org/cwl/cwl#File", 
                            "https://w3id.org/cwl/cwl#Directory"
                        ], 
                        "type": "array"
                    }
                ], 
                "name": "https://w3id.org/cwl/cwl#File/secondaryFiles"
            }, 
            {
                "doc": "The format of the file: this must be an IRI of a concept node that\nrepresents the file format, preferrably defined within an ontology.\nIf no ontology is available, file formats may be tested by exact match.\n\nReasoning about format compatability must be done by checking that an\ninput file format is the same, `owl:equivalentClass` or\n`rdfs:subClassOf` the format required by the input parameter.\n`owl:equivalentClass` is transitive with `rdfs:subClassOf`, e.g. if\n`<B> owl:equivalentClass <C>` and `<B> owl:subclassOf <A>` then infer\n`<C> owl:subclassOf <A>`.\n\nFile format ontologies may be provided in the \"$schema\" metadata at the\nroot of the document.  If no ontologies are specified in `$schema`, the\nruntime may perform exact file format matches.\n", 
                "jsonldPredicate": {
                    "_type": "@id", 
                    "_id": "https://w3id.org/cwl/cwl#format", 
                    "identity": true
                }, 
                "type": [
                    "null", 
                    "string"
                ], 
                "name": "https://w3id.org/cwl/cwl#File/format"
            }, 
            {
                "doc": "File contents literal.  Maximum of 64 KiB.\n\nIf neither `location` nor `path` is provided, `contents` must be\nnon-null.  The implementation must assign a unique identifier for the\n`location` field.  When the file is staged as input to CommandLineTool,\nthe value of `contents` must be written to a file.\n\nIf `loadContents` of `inputBinding` or `outputBinding` is true and\n`location` is valid, the implementation must read up to the first 64\nKiB of text from the file and place it in the \"contents\" field.\n", 
                "type": [
                    "null", 
                    "string"
                ], 
                "name": "https://w3id.org/cwl/cwl#File/contents"
            }
        ]
    }, 
    {
        "type": "record", 
        "doc": "Represents a directory to present to a command line tool.\n", 
        "docAfter": "https://w3id.org/cwl/cwl#File", 
        "name": "https://w3id.org/cwl/cwl#Directory", 
        "fields": [
            {
                "doc": "Must be `Directory` to indicate this object describes a Directory.", 
                "jsonldPredicate": {
                    "_type": "@vocab", 
                    "_id": "@type"
                }, 
                "type": {
                    "symbols": [
                        "https://w3id.org/cwl/cwl#Directory"
                    ], 
                    "type": "enum", 
                    "name": "https://w3id.org/cwl/cwl#Directory/class/Directory_class"
                }, 
                "name": "https://w3id.org/cwl/cwl#Directory/class"
            }, 
            {
                "doc": "An IRI that identifies the directory resource.  This may be a relative\nreference, in which case it must be resolved using the base IRI of the\ndocument.  The location may refer to a local or remote resource.  If\nthe `listing` field is not set, the implementation must use the\nlocation IRI to retrieve directory listing.  If an implementation is\nunable to retrieve the directory listing stored at a remote resource (due to\nunsupported protocol, access denied, or other issue) it must signal an\nerror.\n\nIf the `location` field is not provided, the `listing` field must be\nprovided.  The implementation must assign a unique identifier for\nthe `location` field.\n\nIf the `path` field is provided but the `location` field is not, an\nimplementation may assign the value of the `path` field to `location`,\nthen follow the rules above.\n", 
                "jsonldPredicate": {
                    "_type": "@id", 
                    "_id": "@id"
                }, 
                "type": [
                    "null", 
                    "string"
                ], 
                "name": "https://w3id.org/cwl/cwl#Directory/location"
            }, 
            {
                "doc": "The local path where the Directory is made available prior to executing a\nCommandLineTool.  This must be set by the implementation.  This field\nmust not be used in any other context.  The command line tool being\nexecuted must be able to to access the directory at `path` using the POSIX\n`opendir(2)` syscall.\n\nIf the `path` contains [POSIX shell metacharacters](http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_02)\n(`|`,`&`, `;`, `<`, `>`, `(`,`)`, `$`,`` ` ``, `\\`, `\"`, `'`,\n`<space>`, `<tab>`, and `<newline>`) or characters\n[not allowed](http://www.iana.org/assignments/idna-tables-6.3.0/idna-tables-6.3.0.xhtml)\nfor [Internationalized Domain Names for Applications](https://tools.ietf.org/html/rfc6452)\nthen implementations may terminate the process with a\n`permanentFailure`.\n", 
                "jsonldPredicate": {
                    "_type": "@id", 
                    "_id": "https://w3id.org/cwl/cwl#path"
                }, 
                "type": [
                    "null", 
                    "string"
                ], 
                "name": "https://w3id.org/cwl/cwl#Directory/path"
            }, 
            {
                "doc": "The base name of the directory, that is, the name of the file without any\nleading directory path.  The base name must not contain a slash `/`.\n\nIf not provided, the implementation must set this field based on the\n`location` field by taking the final path component after parsing\n`location` as an IRI.  If `basename` is provided, it is not required to\nmatch the value from `location`.\n\nWhen this file is made available to a CommandLineTool, it must be named\nwith `basename`, i.e. the final component of the `path` field must match\n`basename`.\n", 
                "jsonldPredicate": "cwl:basename", 
                "type": [
                    "null", 
                    "string"
                ], 
                "name": "https://w3id.org/cwl/cwl#Directory/basename"
            }, 
            {
                "doc": "List of files or subdirectories contained in this directory.  The name\nof each file or subdirectory is determined by the `basename` field of\neach `File` or `Directory` object.  It is an error if a `File` shares a\n`basename` with any other entry in `listing`.  If two or more\n`Directory` object share the same `basename`, this must be treated as\nequivalent to a single subdirectory with the listings recursively\nmerged.\n", 
                "jsonldPredicate": {
                    "_id": "https://w3id.org/cwl/cwl#listing"
                }, 
                "type": [
                    "null", 
                    {
                        "items": [
                            "https://w3id.org/cwl/cwl#File", 
                            "https://w3id.org/cwl/cwl#Directory"
                        ], 
                        "type": "array"
                    }
                ], 
                "name": "https://w3id.org/cwl/cwl#Directory/listing"
            }
        ]
    }, 
    {
        "fields": [
            {
                "doc": "A short, human-readable label of this object.", 
                "jsonldPredicate": "rdfs:label", 
                "type": [
                    "null", 
                    "string"
                ], 
                "name": "https://w3id.org/cwl/cwl#SchemaBase/label"
            }
        ], 
        "abstract": true, 
        "type": "record", 
        "name": "https://w3id.org/cwl/cwl#SchemaBase"
    }, 
    {
        "extends": "https://w3id.org/cwl/cwl#SchemaBase", 
        "name": "https://w3id.org/cwl/cwl#Parameter", 
        "doc": "Define an input or output parameter to a process.\n", 
        "fields": [
            {
                "doc": "Only valid when `type: File` or is an array of `items: File`.\n\nDescribes files that must be included alongside the primary file(s).\n\nIf the value is an expression, the value of `self` in the expression\nmust be the primary input or output File to which this binding applies.\n\nIf the value is a string, it specifies that the following pattern\nshould be applied to the primary file:\n\n  1. If string begins with one or more caret `^` characters, for each\n    caret, remove the last file extension from the path (the last\n    period `.` and all following characters).  If there are no file\n    extensions, the path is unchanged.\n  2. Append the remainder of the string to the end of the file path.\n", 
                "jsonldPredicate": "cwl:secondaryFiles", 
                "type": [
                    "null", 
                    "string", 
                    "https://w3id.org/cwl/cwl#Expression", 
                    {
                        "items": [
                            "string", 
                            "https://w3id.org/cwl/cwl#Expression"
                        ], 
                        "type": "array"
                    }
                ], 
                "name": "https://w3id.org/cwl/cwl#Parameter/secondaryFiles"
            }, 
            {
                "doc": "Only valid when `type: File` or is an array of `items: File`.\n\nFor input parameters, this must be one or more IRIs of concept nodes\nthat represents file formats which are allowed as input to this\nparameter, preferrably defined within an ontology.  If no ontology is\navailable, file formats may be tested by exact match.\n\nFor output parameters, this is the file format that will be assigned to\nthe output parameter.\n", 
                "jsonldPredicate": {
                    "_type": "@id", 
                    "_id": "https://w3id.org/cwl/cwl#format", 
                    "identity": true
                }, 
                "type": [
                    "null", 
                    "string", 
                    {
                        "items": "string", 
                        "type": "array"
                    }, 
                    "https://w3id.org/cwl/cwl#Expression"
                ], 
                "name": "https://w3id.org/cwl/cwl#Parameter/format"
            }, 
            {
                "doc": "Only valid when `type: File` or is an array of `items: File`.\n\nA value of `true` indicates that the file is read or written\nsequentially without seeking.  An implementation may use this flag to\nindicate whether it is valid to stream file contents using a named\npipe.  Default: `false`.\n", 
                "type": [
                    "null", 
                    "boolean"
                ], 
                "name": "https://w3id.org/cwl/cwl#Parameter/streamable"
            }, 
            {
                "doc": "A documentation string for this type, or an array of strings which should be concatenated.", 
                "jsonldPredicate": "rdfs:comment", 
                "type": [
                    "null", 
                    "string", 
                    {
                        "items": "string", 
                        "type": "array"
                    }
                ], 
                "name": "https://w3id.org/cwl/cwl#Parameter/doc"
            }
        ], 
        "abstract": true, 
        "type": "record"
    }, 
    {
        "symbols": [
            "https://w3id.org/cwl/cwl#ExpressionPlaceholder"
        ], 
        "doc": "'Expression' is not a real type.  It indicates that a field must allow\nruntime parameter references.  If [InlineJavascriptRequirement](#InlineJavascriptRequirement)\nis declared and supported by the platform, the field must also allow\nJavascript expressions.\n", 
        "type": "enum", 
        "name": "https://w3id.org/cwl/cwl#Expression"
    }, 
    {
        "fields": [
            {
                "doc": "Only valid when `type: File` or is an array of `items: File`.\n\nRead up to the first 64 KiB of text from the file and place it in the\n\"contents\" field of the file object for use by expressions.\n", 
                "jsonldPredicate": "cwl:loadContents", 
                "type": [
                    "null", 
                    "boolean"
                ], 
                "name": "https://w3id.org/cwl/cwl#InputBinding/loadContents"
            }
        ], 
        "abstract": true, 
        "type": "record", 
        "name": "https://w3id.org/cwl/cwl#InputBinding"
    }, 
    {
        "abstract": true, 
        "type": "record", 
        "name": "https://w3id.org/cwl/cwl#OutputBinding"
    }, 
    {
        "extends": "https://w3id.org/cwl/cwl#SchemaBase", 
        "abstract": true, 
        "type": "record", 
        "name": "https://w3id.org/cwl/cwl#InputSchema"
    }, 
    {
        "extends": "https://w3id.org/cwl/cwl#SchemaBase", 
        "abstract": true, 
        "type": "record", 
        "name": "https://w3id.org/cwl/cwl#OutputSchema"
    }, 
    {
        "type": "record", 
        "specialize": [
            {
                "specializeFrom": "https://w3id.org/cwl/salad#RecordSchema", 
                "specializeTo": "https://w3id.org/cwl/cwl#InputRecordSchema"
            }, 
            {
                "specializeFrom": "https://w3id.org/cwl/salad#EnumSchema", 
                "specializeTo": "https://w3id.org/cwl/cwl#InputEnumSchema"
            }, 
            {
                "specializeFrom": "https://w3id.org/cwl/salad#ArraySchema", 
                "specializeTo": "https://w3id.org/cwl/cwl#InputArraySchema"
            }, 
            {
                "specializeFrom": "https://w3id.org/cwl/salad#PrimitiveType", 
                "specializeTo": "https://w3id.org/cwl/cwl#CWLType"
            }
        ], 
        "extends": "https://w3id.org/cwl/salad#RecordField", 
        "name": "https://w3id.org/cwl/cwl#InputRecordField", 
        "fields": [
            {
                "jsonldPredicate": "cwl:inputBinding", 
                "type": [
                    "null", 
                    "https://w3id.org/cwl/cwl#InputBinding"
                ], 
                "name": "https://w3id.org/cwl/cwl#InputRecordField/inputBinding"
            }, 
            {
                "doc": "A short, human-readable label of this process object.", 
                "jsonldPredicate": "rdfs:label", 
                "type": [
                    "null", 
                    "string"
                ], 
                "name": "https://w3id.org/cwl/cwl#InputRecordField/label"
            }
        ]
    }, 
    {
        "type": "record", 
        "specialize": [
            {
                "specializeFrom": "https://w3id.org/cwl/salad#RecordField", 
                "specializeTo": "https://w3id.org/cwl/cwl#InputRecordField"
            }
        ], 
        "extends": [
            "https://w3id.org/cwl/salad#RecordSchema", 
            "https://w3id.org/cwl/cwl#InputSchema"
        ], 
        "name": "https://w3id.org/cwl/cwl#InputRecordSchema"
    }, 
    {
        "type": "record", 
        "extends": [
            "https://w3id.org/cwl/salad#EnumSchema", 
            "https://w3id.org/cwl/cwl#InputSchema"
        ], 
        "name": "https://w3id.org/cwl/cwl#InputEnumSchema", 
        "fields": [
            {
                "jsonldPredicate": "cwl:inputBinding", 
                "type": [
                    "null", 
                    "https://w3id.org/cwl/cwl#InputBinding"
                ], 
                "name": "https://w3id.org/cwl/cwl#InputEnumSchema/inputBinding"
            }
        ]
    }, 
    {
        "type": "record", 
        "specialize": [
            {
                "specializeFrom": "https://w3id.org/cwl/salad#RecordSchema", 
                "specializeTo": "https://w3id.org/cwl/cwl#InputRecordSchema"
            }, 
            {
                "specializeFrom": "https://w3id.org/cwl/salad#EnumSchema", 
                "specializeTo": "https://w3id.org/cwl/cwl#InputEnumSchema"
            }, 
            {
                "specializeFrom": "https://w3id.org/cwl/salad#ArraySchema", 
                "specializeTo": "https://w3id.org/cwl/cwl#InputArraySchema"
            }, 
            {
                "specializeFrom": "https://w3id.org/cwl/salad#PrimitiveType", 
                "specializeTo": "https://w3id.org/cwl/cwl#CWLType"
            }
        ], 
        "extends": [
            "https://w3id.org/cwl/salad#ArraySchema", 
            "https://w3id.org/cwl/cwl#InputSchema"
        ], 
        "name": "https://w3id.org/cwl/cwl#InputArraySchema", 
        "fields": [
            {
                "jsonldPredicate": "cwl:inputBinding", 
                "type": [
                    "null", 
                    "https://w3id.org/cwl/cwl#InputBinding"
                ], 
                "name": "https://w3id.org/cwl/cwl#InputArraySchema/inputBinding"
            }
        ]
    }, 
    {
        "type": "record", 
        "specialize": [
            {
                "specializeFrom": "https://w3id.org/cwl/salad#RecordSchema", 
                "specializeTo": "https://w3id.org/cwl/cwl#OutputRecordSchema"
            }, 
            {
                "specializeFrom": "https://w3id.org/cwl/salad#EnumSchema", 
                "specializeTo": "https://w3id.org/cwl/cwl#OutputEnumSchema"
            }, 
            {
                "specializeFrom": "https://w3id.org/cwl/salad#ArraySchema", 
                "specializeTo": "https://w3id.org/cwl/cwl#OutputArraySchema"
            }, 
            {
                "specializeFrom": "https://w3id.org/cwl/salad#PrimitiveType", 
                "specializeTo": "https://w3id.org/cwl/cwl#CWLType"
            }
        ], 
        "extends": "https://w3id.org/cwl/salad#RecordField", 
        "name": "https://w3id.org/cwl/cwl#OutputRecordField", 
        "fields": [
            {
                "jsonldPredicate": "cwl:outputBinding", 
                "type": [
                    "null", 
                    "https://w3id.org/cwl/cwl#OutputBinding"
                ], 
                "name": "https://w3id.org/cwl/cwl#OutputRecordField/outputBinding"
            }
        ]
    }, 
    {
        "type": "record", 
        "docParent": "https://w3id.org/cwl/cwl#OutputParameter", 
        "extends": [
            "https://w3id.org/cwl/salad#RecordSchema", 
            "https://w3id.org/cwl/cwl#OutputSchema"
        ], 
        "name": "https://w3id.org/cwl/cwl#OutputRecordSchema", 
        "specialize": [
            {
                "specializeFrom": "https://w3id.org/cwl/salad#RecordField", 
                "specializeTo": "https://w3id.org/cwl/cwl#OutputRecordField"
            }
        ]
    }, 
    {
        "type": "record", 
        "docParent": "https://w3id.org/cwl/cwl#OutputParameter", 
        "extends": [
            "https://w3id.org/cwl/salad#EnumSchema", 
            "https://w3id.org/cwl/cwl#OutputSchema"
        ], 
        "name": "https://w3id.org/cwl/cwl#OutputEnumSchema", 
        "fields": [
            {
                "jsonldPredicate": "cwl:outputBinding", 
                "type": [
                    "null", 
                    "https://w3id.org/cwl/cwl#OutputBinding"
                ], 
                "name": "https://w3id.org/cwl/cwl#OutputEnumSchema/outputBinding"
            }
        ]
    }, 
    {
        "docParent": "https://w3id.org/cwl/cwl#OutputParameter", 
        "extends": [
            "https://w3id.org/cwl/salad#ArraySchema", 
            "https://w3id.org/cwl/cwl#OutputSchema"
        ], 
        "name": "https://w3id.org/cwl/cwl#OutputArraySchema", 
        "fields": [
            {
                "jsonldPredicate": "cwl:outputBinding", 
                "type": [
                    "null", 
                    "https://w3id.org/cwl/cwl#OutputBinding"
                ], 
                "name": "https://w3id.org/cwl/cwl#OutputArraySchema/outputBinding"
            }
        ], 
        "specialize": [
            {
                "specializeFrom": "https://w3id.org/cwl/salad#RecordSchema", 
                "specializeTo": "https://w3id.org/cwl/cwl#OutputRecordSchema"
            }, 
            {
                "specializeFrom": "https://w3id.org/cwl/salad#EnumSchema", 
                "specializeTo": "https://w3id.org/cwl/cwl#OutputEnumSchema"
            }, 
            {
                "specializeFrom": "https://w3id.org/cwl/salad#ArraySchema", 
                "specializeTo": "https://w3id.org/cwl/cwl#OutputArraySchema"
            }, 
            {
                "specializeFrom": "https://w3id.org/cwl/salad#PrimitiveType", 
                "specializeTo": "https://w3id.org/cwl/cwl#CWLType"
            }
        ], 
        "type": "record"
    }, 
    {
        "type": "record", 
        "extends": "https://w3id.org/cwl/cwl#Parameter", 
        "name": "https://w3id.org/cwl/cwl#InputParameter", 
        "fields": [
            {
                "doc": "The unique identifier for this parameter object.", 
                "jsonldPredicate": "@id", 
                "type": "string", 
                "name": "https://w3id.org/cwl/cwl#InputParameter/id"
            }, 
            {
                "doc": "Describes how to handle the inputs of a process and convert them\ninto a concrete form for execution, such as command line parameters.\n", 
                "jsonldPredicate": "cwl:inputBinding", 
                "type": [
                    "null", 
                    "https://w3id.org/cwl/cwl#InputBinding"
                ], 
                "name": "https://w3id.org/cwl/cwl#InputParameter/inputBinding"
            }, 
            {
                "doc": "The default value for this parameter if not provided in the input\nobject.\n", 
                "jsonldPredicate": {
                    "_id": "https://w3id.org/cwl/cwl#default", 
                    "noLinkCheck": true
                }, 
                "type": [
                    "null", 
                    "Any"
                ], 
                "name": "https://w3id.org/cwl/cwl#InputParameter/default"
            }, 
            {
                "doc": "Specify valid types of data that may be assigned to this parameter.\n", 
                "jsonldPredicate": {
                    "refScope": 2, 
                    "_type": "@vocab", 
                    "_id": "https://w3id.org/cwl/salad#type", 
                    "typeDSL": true
                }, 
                "type": [
                    "null", 
                    "https://w3id.org/cwl/cwl#CWLType", 
                    "https://w3id.org/cwl/cwl#InputRecordSchema", 
                    "https://w3id.org/cwl/cwl#InputEnumSchema", 
                    "https://w3id.org/cwl/cwl#InputArraySchema", 
                    "string", 
                    {
                        "items": [
                            "https://w3id.org/cwl/cwl#CWLType", 
                            "https://w3id.org/cwl/cwl#InputRecordSchema", 
                            "https://w3id.org/cwl/cwl#InputEnumSchema", 
                            "https://w3id.org/cwl/cwl#InputArraySchema", 
                            "string"
                        ], 
                        "type": "array"
                    }
                ], 
                "name": "https://w3id.org/cwl/cwl#InputParameter/type"
            }
        ]
    }, 
    {
        "type": "record", 
        "extends": "https://w3id.org/cwl/cwl#Parameter", 
        "name": "https://w3id.org/cwl/cwl#OutputParameter", 
        "fields": [
            {
                "doc": "The unique identifier for this parameter object.", 
                "jsonldPredicate": "@id", 
                "type": "string", 
                "name": "https://w3id.org/cwl/cwl#OutputParameter/id"
            }, 
            {
                "doc": "Describes how to handle the outputs of a process.\n", 
                "jsonldPredicate": "cwl:outputBinding", 
                "type": [
                    "null", 
                    "https://w3id.org/cwl/cwl#OutputBinding"
                ], 
                "name": "https://w3id.org/cwl/cwl#OutputParameter/outputBinding"
            }
        ]
    }, 
    {
        "doc": "A process requirement declares a prerequisite that may or must be fulfilled\nbefore executing a process.  See [`Process.hints`](#process) and\n[`Process.requirements`](#process).\n\nProcess requirements are the primary mechanism for specifying extensions to\nthe CWL core specification.\n", 
        "abstract": true, 
        "type": "record", 
        "name": "https://w3id.org/cwl/cwl#ProcessRequirement"
    }, 
    {
        "doc": "\nThe base executable type in CWL is the `Process` object defined by the\ndocument.  Note that the `Process` object is abstract and cannot be\ndirectly executed.\n", 
        "abstract": true, 
        "type": "record", 
        "name": "https://w3id.org/cwl/cwl#Process", 
        "fields": [
            {
                "doc": "The unique identifier for this process object.", 
                "jsonldPredicate": "@id", 
                "type": [
                    "null", 
                    "string"
                ], 
                "name": "https://w3id.org/cwl/cwl#Process/id"
            }, 
            {
                "doc": "Defines the input parameters of the process.  The process is ready to\nrun when all required input parameters are associated with concrete\nvalues.  Input parameters include a schema for each parameter which is\nused to validate the input object.  It may also be used to build a user\ninterface for constructing the input object.\n", 
                "jsonldPredicate": {
                    "_id": "https://w3id.org/cwl/cwl#inputs", 
                    "mapSubject": "id", 
                    "mapPredicate": "type"
                }, 
                "type": {
                    "items": "https://w3id.org/cwl/cwl#InputParameter", 
                    "type": "array"
                }, 
                "name": "https://w3id.org/cwl/cwl#Process/inputs"
            }, 
            {
                "doc": "Defines the parameters representing the output of the process.  May be\nused to generate and/or validate the output object.\n", 
                "jsonldPredicate": {
                    "_id": "https://w3id.org/cwl/cwl#outputs", 
                    "mapSubject": "id", 
                    "mapPredicate": "type"
                }, 
                "type": {
                    "items": "https://w3id.org/cwl/cwl#OutputParameter", 
                    "type": "array"
                }, 
                "name": "https://w3id.org/cwl/cwl#Process/outputs"
            }, 
            {
                "doc": "Declares requirements that apply to either the runtime environment or the\nworkflow engine that must be met in order to execute this process.  If\nan implementation cannot satisfy all requirements, or a requirement is\nlisted which is not recognized by the implementation, it is a fatal\nerror and the implementation must not attempt to run the process,\nunless overridden at user option.\n", 
                "jsonldPredicate": {
                    "_id": "https://w3id.org/cwl/cwl#requirements", 
                    "mapSubject": "class"
                }, 
                "type": [
                    "null", 
                    {
                        "items": "https://w3id.org/cwl/cwl#ProcessRequirement", 
                        "type": "array"
                    }
                ], 
                "name": "https://w3id.org/cwl/cwl#Process/requirements"
            }, 
            {
                "doc": "Declares hints applying to either the runtime environment or the\nworkflow engine that may be helpful in executing this process.  It is\nnot an error if an implementation cannot satisfy all hints, however\nthe implementation may report a warning.\n", 
                "jsonldPredicate": {
                    "noLinkCheck": true, 
                    "_id": "https://w3id.org/cwl/cwl#hints", 
                    "mapSubject": "class"
                }, 
                "type": [
                    "null", 
                    {
                        "items": "Any", 
                        "type": "array"
                    }
                ], 
                "name": "https://w3id.org/cwl/cwl#Process/hints"
            }, 
            {
                "doc": "A short, human-readable label of this process object.", 
                "jsonldPredicate": "rdfs:label", 
                "type": [
                    "null", 
                    "string"
                ], 
                "name": "https://w3id.org/cwl/cwl#Process/label"
            }, 
            {
                "doc": "A long, human-readable description of this process object.", 
                "jsonldPredicate": "rdfs:comment", 
                "type": [
                    "null", 
                    "string"
                ], 
                "name": "https://w3id.org/cwl/cwl#Process/doc"
            }, 
            {
                "doc": "CWL document version. Always required at the document root. Not\nrequired for a Process embedded inside another Process.\n", 
                "jsonldPredicate": {
                    "_type": "@vocab", 
                    "_id": "https://w3id.org/cwl/cwl#cwlVersion"
                }, 
                "type": [
                    "null", 
                    "https://w3id.org/cwl/cwl#CWLVersion"
                ], 
                "name": "https://w3id.org/cwl/cwl#Process/cwlVersion"
            }
        ]
    }, 
    {
        "type": "record", 
        "doc": "Indicates that the workflow platform must support inline Javascript expressions.\nIf this requirement is not present, the workflow platform must not perform expression\ninterpolatation.\n", 
        "extends": "https://w3id.org/cwl/cwl#ProcessRequirement", 
        "name": "https://w3id.org/cwl/cwl#InlineJavascriptRequirement", 
        "fields": [
            {
                "doc": "Always 'InlineJavascriptRequirement'", 
                "jsonldPredicate": {
                    "_type": "@vocab", 
                    "_id": "@type"
                }, 
                "type": "string", 
                "name": "https://w3id.org/cwl/cwl#InlineJavascriptRequirement/class"
            }, 
            {
                "doc": "Additional code fragments that will also be inserted\nbefore executing the expression code.  Allows for function definitions that may\nbe called from CWL expressions.\n", 
                "type": [
                    "null", 
                    {
                        "items": "string", 
                        "type": "array"
                    }
                ], 
                "name": "https://w3id.org/cwl/cwl#InlineJavascriptRequirement/expressionLib"
            }
        ]
    }, 
    {
        "type": "record", 
        "doc": "This field consists of an array of type definitions which must be used when\ninterpreting the `inputs` and `outputs` fields.  When a `type` field\ncontain a IRI, the implementation must check if the type is defined in\n`schemaDefs` and use that definition.  If the type is not found in\n`schemaDefs`, it is an error.  The entries in `schemaDefs` must be\nprocessed in the order listed such that later schema definitions may refer\nto earlier schema definitions.\n", 
        "extends": "https://w3id.org/cwl/cwl#ProcessRequirement", 
        "name": "https://w3id.org/cwl/cwl#SchemaDefRequirement", 
        "fields": [
            {
                "doc": "Always 'SchemaDefRequirement'", 
                "jsonldPredicate": {
                    "_type": "@vocab", 
                    "_id": "@type"
                }, 
                "type": "string", 
                "name": "https://w3id.org/cwl/cwl#SchemaDefRequirement/class"
            }, 
            {
                "doc": "The list of type definitions.", 
                "type": {
                    "items": "https://w3id.org/cwl/cwl#InputSchema", 
                    "type": "array"
                }, 
                "name": "https://w3id.org/cwl/cwl#SchemaDefRequirement/types"
            }
        ]
    }, 
    {
        "doc": [
            "# Common Workflow Language (CWL) Command Line Tool Description, v1.0\n\nThis version:\n  * https://w3id.org/cwl/v1.0/\n\nCurrent version:\n  * https://w3id.org/cwl/\n", 
            "\n\n", 
            "Authors:\n\n* Peter Amstutz <peter.amstutz@curoverse.com>, Arvados Project, Curoverse\n* Michael R. Crusoe <michael.crusoe@gmail.com>, Common Workflow Language\n  project\n* Neboj\u0161a Tijani\u0107 <nebojsa.tijanic@sbgenomics.com>, Seven Bridges Genomics\n\nContributors:\n\n* Brad Chapman <bchapman@hsph.harvard.edu>, Harvard Chan School of Public Health\n* John Chilton <jmchilton@gmail.com>, Galaxy Project, Pennsylvania State University\n* Michael Heuer <heuermh@berkeley.edu,>,UC Berkeley AMPLab\n* Andrey Kartashov <Andrey.Kartashov@cchmc.org>, Cincinnati Children's Hospital\n* Dan Leehr <dan.leehr@duke.edu>, Duke University\n* Herv\u00e9 M\u00e9nager <herve.menager@gmail.com>, Institut Pasteur\n* Maya Nedeljkovich <maja.nedeljkovic@sbgenomics.com>, Seven Bridges Genomics\n* Matt Scales <mscales@icr.ac.uk>, Institute of Cancer Research, London\n* Stian Soiland-Reyes [soiland-reyes@cs.manchester.ac.uk](mailto:soiland-reyes@cs.manchester.ac.uk), University of Manchester\n* Luka Stojanovic <luka.stojanovic@sbgenomics.com>, Seven Bridges Genomics\n", 
            "\n\n", 
            "# Abstract\n\nA Command Line Tool is a non-interactive executable program that reads\nsome input, performs a computation, and terminates after producing some\noutput.  Command line programs are a flexible unit of code sharing and\nreuse, unfortunately the syntax and input/output semantics among command\nline programs is extremely heterogeneous. A common layer for describing\nthe syntax and semantics of programs can reduce this incidental\ncomplexity by providing a consistent way to connect programs together.\nThis specification defines the Common Workflow Language (CWL) Command\nLine Tool Description, a vendor-neutral standard for describing the\nsyntax and input/output semantics of command line programs.\n", 
            "# Status of this document\n\nThis document is the product of the [Common Workflow Language working\ngroup](https://groups.google.com/forum/#!forum/common-workflow-language).  The\nlatest version of this document is available in the \"v1.0\" directory at\n\nhttps://github.com/common-workflow-language/common-workflow-language\n\nThe products of the CWL working group (including this document) are made available\nunder the terms of the Apache License, version 2.0.\n\n<!--ToC-->\n\n# Introduction\n\nThe Common Workflow Language (CWL) working group is an informal, multi-vendor\nworking group consisting of various organizations and individuals that have an\ninterest in portability of data analysis workflows.  The goal is to create\nspecifications like this one that enable data scientists to describe analysis\ntools and workflows that are powerful, easy to use, portable, and support\nreproducibility.\n", 
            "## Introduction to CWL Command Line Tool standard v1.0\n\nThis specification represents the first full release from the CWL group.\nSince draft-3, version 1.0 introduces the following changes and additions\nto the CWL Command Line Tool standard:\n\n  * The [Directory](#Directory) type.\n  * Syntax simplifcations: denoted by the `map<>` syntax. Example: inputs\n    contains a list of items, each with an id. Now one can specify\n    a mapping of that identifier to the corresponding\n    `CommandInputParamater`.\n    ```\n    inputs:\n     - id: one\n       type: string\n       doc: First input parameter\n     - id: two\n       type: int\n       doc: Second input parameter\n    ```\n    can be\n    ```\n    inputs:\n     one:\n      type: string\n      doc: First input parameter\n     two:\n      type: int\n      doc: Second input parameter\n    ```\n  * [InitialWorkDirRequirement](#InitialWorkDirRequirement): list of\n    files and subdirectories to be present in the output directory prior\n    to execution.\n  * Shortcuts for specifying the standard [output](#stdout) and/or\n    [error](#stderr) streams as a (streamable) File output.\n  * [SoftwareRequirement](#SoftwareRequirement) for describing software\n    dependencies of a tool.\n  * The common `description` field has been renamed to `doc`.\n\n## Errata\n\nPost v1.0 release changes to the spec.\n\n  * 13 July 2016: Mark `baseCommand` as optional and update descriptive text.\n\n## Purpose\n\nStandalone programs are a flexible and interoperable form of code reuse.\nUnlike monolithic applications, applications and analysis workflows which\nare composed of multiple separate programs can be written in multiple\nlanguages and execute concurrently on multiple hosts.  However, POSIX\ndoes not dictate computer-readable grammar or semantics for program input\nand output, resulting in extremely heterogeneous command line grammar and\ninput/output semantics among program.  This is a particular problem in\ndistributed computing (multi-node compute clusters) and virtualized\nenvironments (such as Docker containers) where it is often necessary to\nprovision resources such as input files before executing the program.\n\nOften this gap is filled by hard coding program invocation and\nimplicitly assuming requirements will be met, or abstracting program\ninvocation with wrapper scripts or descriptor documents.  Unfortunately,\nwhere these approaches are application or platform specific it creates a\nsignificant barrier to reproducibility and portability, as methods\ndeveloped for one platform must be manually ported to be used on new\nplatforms.  Similarly it creates redundant work, as wrappers for popular\ntools must be rewritten for each application or platform in use.\n\nThe Common Workflow Language Command Line Tool Description is designed to\nprovide a common standard description of grammar and semantics for\ninvoking programs used in data-intensive fields such as Bioinformatics,\nChemistry, Physics, Astronomy, and Statistics.  This specification\ndefines a precise data and execution model for Command Line Tools that\ncan be implemented on a variety of computing platforms, ranging from a\nsingle workstation to cluster, grid, cloud, and high performance\ncomputing platforms.\n", 
            "## References to other specifications\n\n**Javascript Object Notation (JSON)**: http://json.org\n\n**JSON Linked Data (JSON-LD)**: http://json-ld.org\n\n**YAML**: http://yaml.org\n\n**Avro**: https://avro.apache.org/docs/1.8.1/spec.html\n\n**Uniform Resource Identifier (URI) Generic Syntax**: https://tools.ietf.org/html/rfc3986)\n\n**Internationalized Resource Identifiers (IRIs)**:\nhttps://tools.ietf.org/html/rfc3987\n\n**Portable Operating System Interface (POSIX.1-2008)**: http://pubs.opengroup.org/onlinepubs/9699919799/\n\n**Resource Description Framework (RDF)**: http://www.w3.org/RDF/\n\n## Scope\n\nThis document describes CWL syntax, execution, and object model.  It\nis not intended to document a CWL specific implementation, however it may\nserve as a reference for the behavior of conforming implementations.\n\n## Terminology\n\nThe terminology used to describe CWL documents is defined in the\nConcepts section of the specification. The terms defined in the\nfollowing list are used in building those definitions and in describing the\nactions of a CWL implementation:\n\n**may**: Conforming CWL documents and CWL implementations are permitted but\nnot required to behave as described.\n\n**must**: Conforming CWL documents and CWL implementations are required to behave\nas described; otherwise they are in error.\n\n**error**: A violation of the rules of this specification; results are\nundefined. Conforming implementations may detect and report an error and may\nrecover from it.\n\n**fatal error**: A violation of the rules of this specification; results are\nundefined. Conforming implementations must not continue to execute the current\nprocess and may report an error.\n\n**at user option**: Conforming software may or must (depending on the modal verb in\nthe sentence) behave as described; if it does, it must provide users a means to\nenable or disable the behavior described.\n\n**deprecated**: Conforming software may implement a behavior for backwards\ncompatibility.  Portable CWL documents should not rely on deprecated behavior.\nBehavior marked as deprecated may be removed entirely from future revisions of\nthe CWL specification.\n\n# Data model\n\n## Data concepts\n\nAn **object** is a data structure equivalent to the \"object\" type in JSON,\nconsisting of a unordered set of name/value pairs (referred to here as\n**fields**) and where the name is a string and the value is a string, number,\nboolean, array, or object.\n\nA **document** is a file containing a serialized object, or an array of objects.\n\nA **process** is a basic unit of computation which accepts input data,\nperforms some computation, and produces output data. Examples include\nCommandLineTools, Workflows, and ExpressionTools.\n\nAn **input object** is an object describing the inputs to an invocation of\na process.\n\nAn **output object** is an object describing the output resulting from an\ninvocation of a process.\n\nAn **input schema** describes the valid format (required fields, data types)\nfor an input object.\n\nAn **output schema** describes the valid format for an output object.\n\n**Metadata** is information about workflows, tools, or input items.\n\n## Syntax\n\nCWL documents must consist of an object or array of objects represented using\nJSON or YAML syntax.  Upon loading, a CWL implementation must apply the\npreprocessing steps described in the\n[Semantic Annotations for Linked Avro Data (SALAD) Specification](SchemaSalad.html).\nAn implementation may formally validate the structure of a CWL document using\nSALAD schemas located at\nhttps://github.com/common-workflow-language/common-workflow-language/tree/master/v1.0\n\n## Identifiers\n\nIf an object contains an `id` field, that is used to uniquely identify the\nobject in that document.  The value of the `id` field must be unique over the\nentire document.  Identifiers may be resolved relative to either the document\nbase and/or other identifiers following the rules are described in the\n[Schema Salad specification](SchemaSalad.html#Identifier_resolution).\n\nAn implementation may choose to only honor references to object types for\nwhich the `id` field is explicitly listed in this specification.\n\n## Document preprocessing\n\nAn implementation must resolve [$import](SchemaSalad.html#Import) and\n[$include](SchemaSalad.html#Import) directives as described in the\n[Schema Salad specification](SchemaSalad.html).\n\nAnother transformation defined in Schema salad is simplification of data type definitions.\nType `<T>` ending with `?` should be transformed to `[<T>, \"null\"]`.\nType `<T>` ending with `[]` should be transformed to `{\"type\": \"array\", \"items\": <T>}`\n\n## Extensions and metadata\n\nInput metadata (for example, a lab sample identifier) may be represented within\na tool or workflow using input parameters which are explicitly propagated to\noutput.  Future versions of this specification may define additional facilities\nfor working with input/output metadata.\n\nImplementation extensions not required for correct execution (for example,\nfields related to GUI presentation) and metadata about the tool or workflow\nitself (for example, authorship for use in citations) may be provided as\nadditional fields on any object.  Such extensions fields must use a namespace\nprefix listed in the `$namespaces` section of the document as described in the\n[Schema Salad specification](SchemaSalad.html#Explicit_context).\n\nImplementation extensions which modify execution semantics must be [listed in\nthe `requirements` field](#Requirements_and_hints).\n\n# Execution model\n\n## Execution concepts\n\nA **parameter** is a named symbolic input or output of process, with an\nassociated datatype or schema.  During execution, values are assigned to\nparameters to make the input object or output object used for concrete\nprocess invocation.\n\nA **CommandLineTool** is a process characterized by the execution of a\nstandalone, non-interactive program which is invoked on some input,\nproduces output, and then terminates.\n\nA **workflow** is a process characterized by multiple subprocess steps,\nwhere step outputs are connected to the inputs of downstream steps to\nform a directed acylic graph, and independent steps may run concurrently.\n\nA **runtime environment** is the actual hardware and software environment when\nexecuting a command line tool.  It includes, but is not limited to, the\nhardware architecture, hardware resources, operating system, software runtime\n(if applicable, such as the specific Python interpreter or the specific Java\nvirtual machine), libraries, modules, packages, utilities, and data files\nrequired to run the tool.\n\nA **workflow platform** is a specific hardware and software implementation\ncapable of interpreting CWL documents and executing the processes specified by\nthe document.  The responsibilities of the workflow platform may include\nscheduling process invocation, setting up the necessary runtime environment,\nmaking input data available, invoking the tool process, and collecting output.\n\nA workflow platform may choose to only implement the Command Line Tool\nDescription part of the CWL specification.\n\nIt is intended that the workflow platform has broad leeway outside of this\nspecification to optimize use of computing resources and enforce policies\nnot covered by this specification.  Some areas that are currently out of\nscope for CWL specification but may be handled by a specific workflow\nplatform include:\n\n* Data security and permissions\n* Scheduling tool invocations on remote cluster or cloud compute nodes.\n* Using virtual machines or operating system containers to manage the runtime\n(except as described in [DockerRequirement](CommandLineTool.html#DockerRequirement)).\n* Using remote or distributed file systems to manage input and output files.\n* Transforming file paths.\n* Determining if a process has previously been executed, and if so skipping it\nand reusing previous results.\n* Pausing, resuming or checkpointing processes or workflows.\n\nConforming CWL processes must not assume anything about the runtime\nenvironment or workflow platform unless explicitly declared though the use\nof [process requirements](#Requirements_and_hints).\n\n## Generic execution process\n\nThe generic execution sequence of a CWL process (including workflows and\ncommand line line tools) is as follows.\n\n1. Load, process and validate a CWL document, yielding a process object.\n2. Load input object.\n3. Validate the input object against the `inputs` schema for the process.\n4. Validate process requirements are met.\n5. Perform any further setup required by the specific process type.\n6. Execute the process.\n7. Capture results of process execution into the output object.\n8. Validate the output object against the `outputs` schema for the process.\n9. Report the output object to the process caller.\n\n## Requirements and hints\n\nA **process requirement** modifies the semantics or runtime\nenvironment of a process.  If an implementation cannot satisfy all\nrequirements, or a requirement is listed which is not recognized by the\nimplementation, it is a fatal error and the implementation must not attempt\nto run the process, unless overridden at user option.\n\nA **hint** is similar to a requirement; however, it is not an error if an\nimplementation cannot satisfy all hints.  The implementation may report a\nwarning if a hint cannot be satisfied.\n\nRequirements are inherited.  A requirement specified in a Workflow applies\nto all workflow steps; a requirement specified on a workflow step will\napply to the process implementation of that step and any of its substeps.\n\nIf the same process requirement appears at different levels of the\nworkflow, the most specific instance of the requirement is used, that is,\nan entry in `requirements` on a process implementation such as\nCommandLineTool will take precedence over an entry in `requirements`\nspecified in a workflow step, and an entry in `requirements` on a workflow\nstep takes precedence over the workflow.  Entries in `hints` are resolved\nthe same way.\n\nRequirements override hints.  If a process implementation provides a\nprocess requirement in `hints` which is also provided in `requirements` by\nan enclosing workflow or workflow step, the enclosing `requirements` takes\nprecedence.\n\n## Parameter references\n\nParameter references are denoted by the syntax `$(...)` and may be used in any\nfield permitting the pseudo-type `Expression`, as specified by this document.\nConforming implementations must support parameter references.  Parameter\nreferences use the following subset of\n[Javascript/ECMAScript 5.1](http://www.ecma-international.org/ecma-262/5.1/)\nsyntax, but they are designed to not require a Javascript engine for evaluation.\n\nIn the following BNF grammar, character classes, and grammar rules are denoted\nin '{}', '-' denotes exclusion from a character class, '(())' denotes grouping,\n'|' denotes alternates, trailing '*' denotes zero or more repeats, '+' denote\none or more repeats, '/' escapes these special characters, and all other\ncharacters are literal values.\n\n<p>\n<table class=\"table\">\n<tr><td>symbol::             </td><td>{Unicode alphanumeric}+</td></tr>\n<tr><td>singleq::            </td><td>[' (( {character - '} | \\' ))* ']</td></tr>\n<tr><td>doubleq::            </td><td>[\" (( {character - \"} | \\\" ))* \"]</td></tr>\n<tr><td>index::              </td><td>[ {decimal digit}+ ]</td></tr>\n<tr><td>segment::            </td><td>. {symbol} | {singleq} | {doubleq} | {index}</td></tr>\n<tr><td>parameter reference::</td><td>$( {symbol} {segment}*)</td></tr>\n</table>\n</p>\n\nUse the following algorithm to resolve a parameter reference:\n\n  1. Match the leading symbol as the key\n  2. Look up the key in the parameter context (described below) to get the current value.\n     It is an error if the key is not found in the parameter context.\n  3. If there are no subsequent segments, terminate and return current value\n  4. Else, match the next segment\n  5. Extract the symbol, string, or index from the segment as the key\n  6. Look up the key in current value and assign as new current value.  If\n     the key is a symbol or string, the current value must be an object.\n     If the key is an index, the current value must be an array or string.\n     It is an error if the key does not match the required type, or the key is not found or out\n     of range.\n  7. Repeat steps 3-6\n\nThe root namespace is the parameter context.  The following parameters must\nbe provided:\n\n  * `inputs`: The input object to the current Process.\n  * `self`: A context-specific value.  The contextual values for 'self' are\n    documented for specific fields elsewhere in this specification.  If\n    a contextual value of 'self' is not documented for a field, it\n    must be 'null'.\n  * `runtime`: An object containing configuration details.  Specific to the\n    process type.  An implementation may provide\n    opaque strings for any or all fields of `runtime`.  These must be\n    filled in by the platform after processing the Tool but before actual\n    execution.  Parameter references and expressions may only use the\n    literal string value of the field and must not perform computation on\n    the contents, except where noted otherwise.\n\nIf the value of a field has no leading or trailing non-whitespace\ncharacters around a parameter reference, the effective value of the field\nbecomes the value of the referenced parameter, preserving the return type.\n\nIf the value of a field has non-whitespace leading or trailing characters\naround a parameter reference, it is subject to string interpolation.  The\neffective value of the field is a string containing the leading characters,\nfollowed by the string value of the parameter reference, followed by the\ntrailing characters.  The string value of the parameter reference is its\ntextual JSON representation with the following rules:\n\n  * Leading and trailing quotes are stripped from strings\n  * Objects entries are sorted by key\n\nMultiple parameter references may appear in a single field.  This case\nmust be treated as a string interpolation.  After interpolating the first\nparameter reference, interpolation must be recursively applied to the\ntrailing characters to yield the final string value.\n\n## Expressions\n\nAn expression is a fragment of [Javascript/ECMAScript\n5.1](http://www.ecma-international.org/ecma-262/5.1/) code evaluated by the\nworkflow platform to affect the inputs, outputs, or\nbehavior of a process.  In the generic execution sequence, expressions may\nbe evaluated during step 5 (process setup), step 6 (execute process),\nand/or step 7 (capture output).  Expressions are distinct from regular\nprocesses in that they are intended to modify the behavior of the workflow\nitself rather than perform the primary work of the workflow.\n\nTo declare the use of expressions, the document must include the process\nrequirement `InlineJavascriptRequirement`.  Expressions may be used in any\nfield permitting the pseudo-type `Expression`, as specified by this\ndocument.\n\nExpressions are denoted by the syntax `$(...)` or `${...}`.  A code\nfragment wrapped in the `$(...)` syntax must be evaluated as a\n[ECMAScript expression](http://www.ecma-international.org/ecma-262/5.1/#sec-11).  A\ncode fragment wrapped in the `${...}` syntax must be evaluated as a\n[EMACScript function body](http://www.ecma-international.org/ecma-262/5.1/#sec-13)\nfor an anonymous, zero-argument function.  Expressions must return a valid JSON\ndata type: one of null, string, number, boolean, array, object. Other return\nvalues must result in a `permanentFailure`. Implementations must permit any\nsyntactically valid Javascript and account for nesting of parenthesis or braces\nand that strings that may contain parenthesis or braces when scanning for\nexpressions.\n\nThe runtime must include any code defined in the [\"expressionLib\" field of\nInlineJavascriptRequirement](#InlineJavascriptRequirement) prior to\nexecuting the actual expression.\n\nBefore executing the expression, the runtime must initialize as global\nvariables the fields of the parameter context described above.\n\nThe effective value of the field after expression evaluation follows the\nsame rules as parameter references discussed above.  Multiple expressions\nmay appear in a single field.\n\nExpressions must be evaluated in an isolated context (a \"sandbox\") which\npermits no side effects to leak outside the context.  Expressions also must\nbe evaluated in [Javascript strict mode](http://www.ecma-international.org/ecma-262/5.1/#sec-4.2.2).\n\nThe order in which expressions are evaluated is undefined except where\notherwise noted in this document.\n\nAn implementation may choose to implement parameter references by\nevaluating as a Javascript expression.  The results of evaluating\nparameter references must be identical whether implemented by Javascript\nevaluation or some other means.\n\nImplementations may apply other limits, such as process isolation, timeouts,\nand operating system containers/jails to minimize the security risks associated\nwith running untrusted code embedded in a CWL document.\n\nExceptions thrown from an exception must result in a `permanentFailure` of the\nprocess.\n\n## Executing CWL documents as scripts\n\nBy convention, a CWL document may begin with `#!/usr/bin/env cwl-runner`\nand be marked as executable (the POSIX \"+x\" permission bits) to enable it\nto be executed directly.  A workflow platform may support this mode of\noperation; if so, it must provide `cwl-runner` as an alias for the\nplatform's CWL implementation.\n\nA CWL input object document may similarly begin with `#!/usr/bin/env\ncwl-runner` and be marked as executable.  In this case, the input object\nmust include the field `cwl:tool` supplying an IRI to the default CWL\ndocument that should be executed using the fields of the input object as\ninput parameters.\n\n## Discovering CWL documents on a local filesystem\n\nTo discover CWL documents look in the following locations:\n\n`/usr/share/commonwl/`\n\n`/usr/local/share/commonwl/`\n\n`$XDG_DATA_HOME/commonwl/` (usually `$HOME/.local/share/commonwl`)\n\n`$XDF_DATA_HOME` is from the [XDG Base Directory\nSpecification](http://standards.freedesktop.org/basedir-spec/basedir-spec-0.6.html)\n", 
            "# Running a Command\n\nTo accommodate the enormous variety in syntax and semantics for input, runtime\nenvironment, invocation, and output of arbitrary programs, a CommandLineTool\ndefines an \"input binding\" that describes how to translate abstract input\nparameters to an concrete program invocation, and an \"output binding\" that\ndescribes how to generate output parameters from program output.\n\n## Input binding\n\nThe tool command line is built by applying command line bindings to the\ninput object.  Bindings are listed either as part of an [input\nparameter](#CommandInputParameter) using the `inputBinding` field, or\nseparately using the `arguments` field of the CommandLineTool.\n\nThe algorithm to build the command line is as follows.  In this algorithm,\nthe sort key is a list consisting of one or more numeric or string\nelements.  Strings are sorted lexicographically based on UTF-8 encoding.\n\n  1. Collect `CommandLineBinding` objects from `arguments`.  Assign a sorting\n  key `[position, i]` where `position` is\n  [`CommandLineBinding.position`](#CommandLineBinding) and `i`\n  is the index in the `arguments` list.\n\n  2. Collect `CommandLineBinding` objects from the `inputs` schema and\n  associate them with values from the input object.  Where the input type\n  is a record, array, or map, recursively walk the schema and input object,\n  collecting nested `CommandLineBinding` objects and associating them with\n  values from the input object.\n\n  3. Create a sorting key by taking the value of the `position` field at\n  each level leading to each leaf binding object.  If `position` is not\n  specified, it is not added to the sorting key.  For bindings on arrays\n  and maps, the sorting key must include the array index or map key\n  following the position.  If and only if two bindings have the same sort\n  key, the tie must be broken using the ordering of the field or parameter\n  name immediately containing the leaf binding.\n\n  4. Sort elements using the assigned sorting keys.  Numeric entries sort\n  before strings.\n\n  5. In the sorted order, apply the rules defined in\n  [`CommandLineBinding`](#CommandLineBinding) to convert bindings to actual\n  command line elements.\n\n  6. Insert elements from `baseCommand` at the beginning of the command\n  line.\n\n## Runtime environment\n\nAll files listed in the input object must be made available in the runtime\nenvironment.  The implementation may use a shared or distributed file\nsystem or transfer files via explicit download to the host.  Implementations\nmay choose not to provide access to files not explicitly specified in the input\nobject or process requirements.\n\nOutput files produced by tool execution must be written to the **designated\noutput directory**.  The initial current working directory when executing\nthe tool must be the designated output directory.\n\nFiles may also be written to the **designated temporary directory**.  This\ndirectory must be isolated and not shared with other processes.  Any files\nwritten to the designated temporary directory may be automatically deleted by\nthe workflow platform immediately after the tool terminates.\n\nFor compatibility, files may be written to the **system temporary directory**\nwhich must be located at `/tmp`.  Because the system temporary directory may be\nshared with other processes on the system, files placed in the system temporary\ndirectory are not guaranteed to be deleted automatically.  A tool\nmust not use the system temporary directory as a backchannel communication with\nother tools.  It is valid for the system temporary directory to be the same as\nthe designated temporary directory.\n\nWhen executing the tool, the tool must execute in a new, empty environment\nwith only the environment variables described below; the child process must\nnot inherit environment variables from the parent process except as\nspecified or at user option.\n\n  * `HOME` must be set to the designated output directory.\n  * `TMPDIR` must be set to the designated temporary directory.\n  * `PATH` may be inherited from the parent process, except when run in a\n    container that provides its own `PATH`.\n  * Variables defined by [EnvVarRequirement](#EnvVarRequirement)\n  * The default environment of the container, such as when using\n    [DockerRequirement](#DockerRequirement)\n\nAn implementation may forbid the tool from writing to any location in the\nruntime environment file system other than the designated temporary directory,\nsystem temporary directory, and designated output directory.  An implementation\nmay provide read-only input files, and disallow in-place update of input files.\nThe designated temporary directory, system temporary directory and designated\noutput directory may each reside on different mount points on different file\nsystems.\n\nAn implementation may forbid the tool from directly accessing network\nresources.  Correct tools must not assume any network access.  Future versions\nof the specification may incorporate optional process requirements that\ndescribe the networking needs of a tool.\n\nThe `runtime` section available in [parameter references](#Parameter_references)\nand [expressions](#Expressions) contains the following fields.  As noted\nearlier, an implementation may perform deferred resolution of runtime fields by providing\nopaque strings for any or all of the following fields; parameter references\nand expressions may only use the literal string value of the field and must\nnot perform computation on the contents.\n\n  * `runtime.outdir`: an absolute path to the designated output directory\n  * `runtime.tmpdir`: an absolute path to the designated temporary directory\n  * `runtime.cores`:  number of CPU cores reserved for the tool process\n  * `runtime.ram`:    amount of RAM in mebibytes (2\\*\\*20) reserved for the tool process\n  * `runtime.outdirSize`: reserved storage space available in the designated output directory\n  * `runtime.tmpdirSize`: reserved storage space available in the designated temporary directory\n\nFor `cores`, `ram`, `outdirSize` and `tmpdirSize`, if an implementation can't\nprovide the actual number of reserved cores during the expression evaluation time,\nit should report back the minimal requested amount.\n\nSee [ResourceRequirement](#ResourceRequirement) for details on how to\ndescribe the hardware resources required by a tool.\n\nThe standard input stream and standard output stream may be redirected as\ndescribed in the `stdin` and `stdout` fields.\n\n## Execution\n\nOnce the command line is built and the runtime environment is created, the\nactual tool is executed.\n\nThe standard error stream and standard output stream (unless redirected by\nsetting `stdout` or `stderr`) may be captured by platform logging facilities\nfor storage and reporting.\n\nTools may be multithreaded or spawn child processes; however, when the\nparent process exits, the tool is considered finished regardless of whether\nany detached child processes are still running.  Tools must not require any\nkind of console, GUI, or web based user interaction in order to start and\nrun to completion.\n\nThe exit code of the process indicates if the process completed\nsuccessfully.  By convention, an exit code of zero is treated as success\nand non-zero exit codes are treated as failure.  This may be customized by\nproviding the fields `successCodes`, `temporaryFailCodes`, and\n`permanentFailCodes`.  An implementation may choose to default unspecified\nnon-zero exit codes to either `temporaryFailure` or `permanentFailure`.\n\n## Output binding\n\nIf the output directory contains a file named \"cwl.output.json\", that file\nmust be loaded and used as the output object.  Otherwise, the output object\nmust be generated by walking the parameters listed in `outputs` and\napplying output bindings to the tool output.  Output bindings are\nassociated with output parameters using the `outputBinding` field.  See\n[`CommandOutputBinding`](#CommandOutputBinding) for details.\n"
        ], 
        "type": "documentation", 
        "name": "https://w3id.org/cwl/cwl#CommandLineToolDoc"
    }, 
    {
        "doc": "Define an environment variable that will be set in the runtime environment\nby the workflow platform when executing the command line tool.  May be the\nresult of executing an expression, such as getting a parameter from input.\n", 
        "type": "record", 
        "name": "https://w3id.org/cwl/cwl#EnvironmentDef", 
        "fields": [
            {
                "doc": "The environment variable name", 
                "type": "string", 
                "name": "https://w3id.org/cwl/cwl#EnvironmentDef/envName"
            }, 
            {
                "doc": "The environment variable value", 
                "type": [
                    "string", 
                    "https://w3id.org/cwl/cwl#Expression"
                ], 
                "name": "https://w3id.org/cwl/cwl#EnvironmentDef/envValue"
            }
        ]
    }, 
    {
        "type": "record", 
        "doc": "\nWhen listed under `inputBinding` in the input schema, the term\n\"value\" refers to the the corresponding value in the input object.  For\nbinding objects listed in `CommandLineTool.arguments`, the term \"value\"\nrefers to the effective value after evaluating `valueFrom`.\n\nThe binding behavior when building the command line depends on the data\ntype of the value.  If there is a mismatch between the type described by\nthe input schema and the effective value, such as resulting from an\nexpression evaluation, an implementation must use the data type of the\neffective value.\n\n  - **string**: Add `prefix` and the string to the command line.\n\n  - **number**: Add `prefix` and decimal representation to command line.\n\n  - **boolean**: If true, add `prefix` to the command line.  If false, add\n      nothing.\n\n  - **File**: Add `prefix` and the value of\n    [`File.path`](#File) to the command line.\n\n  - **array**: If `itemSeparator` is specified, add `prefix` and the join\n      the array into a single string with `itemSeparator` separating the\n      items.  Otherwise first add `prefix`, then recursively process\n      individual elements.\n\n  - **object**: Add `prefix` only, and recursively add object fields for\n      which `inputBinding` is specified.\n\n  - **null**: Add nothing.\n", 
        "extends": "https://w3id.org/cwl/cwl#InputBinding", 
        "name": "https://w3id.org/cwl/cwl#CommandLineBinding", 
        "fields": [
            {
                "doc": "The sorting key.  Default position is 0.", 
                "type": [
                    "null", 
                    "int"
                ], 
                "name": "https://w3id.org/cwl/cwl#CommandLineBinding/position"
            }, 
            {
                "doc": "Command line prefix to add before the value.", 
                "type": [
                    "null", 
                    "string"
                ], 
                "name": "https://w3id.org/cwl/cwl#CommandLineBinding/prefix"
            }, 
            {
                "doc": "If true (default), then the prefix and value must be added as separate\ncommand line arguments; if false, prefix and value must be concatenated\ninto a single command line argument.\n", 
                "type": [
                    "null", 
                    "boolean"
                ], 
                "name": "https://w3id.org/cwl/cwl#CommandLineBinding/separate"
            }, 
            {
                "doc": "Join the array elements into a single string with the elements\nseparated by by `itemSeparator`.\n", 
                "type": [
                    "null", 
                    "string"
                ], 
                "name": "https://w3id.org/cwl/cwl#CommandLineBinding/itemSeparator"
            }, 
            {
                "doc": "If `valueFrom` is a constant string value, use this as the value and\napply the binding rules above.\n\nIf `valueFrom` is an expression, evaluate the expression to yield the\nactual value to use to build the command line and apply the binding\nrules above.  If the inputBinding is associated with an input\nparameter, the value of `self` in the expression will be the value of the\ninput parameter.\n\nWhen a binding is part of the `CommandLineTool.arguments` field,\nthe `valueFrom` field is required.\n", 
                "jsonldPredicate": "cwl:valueFrom", 
                "type": [
                    "null", 
                    "string", 
                    "https://w3id.org/cwl/cwl#Expression"
                ], 
                "name": "https://w3id.org/cwl/cwl#CommandLineBinding/valueFrom"
            }, 
            {
                "doc": "If `ShellCommandRequirement` is in the requirements for the current command,\nthis controls whether the value is quoted on the command line (default is true).\nUse `shellQuote: false` to inject metacharacters for operations such as pipes.\n", 
                "type": [
                    "null", 
                    "boolean"
                ], 
                "name": "https://w3id.org/cwl/cwl#CommandLineBinding/shellQuote"
            }
        ]
    }, 
    {
        "type": "record", 
        "doc": "Describes how to generate an output parameter based on the files produced\nby a CommandLineTool.\n\nThe output parameter is generated by applying these operations in\nthe following order:\n\n  - glob\n  - loadContents\n  - outputEval\n", 
        "extends": "https://w3id.org/cwl/cwl#OutputBinding", 
        "name": "https://w3id.org/cwl/cwl#CommandOutputBinding", 
        "fields": [
            {
                "doc": "Find files relative to the output directory, using POSIX glob(3)\npathname matching.  If an array is provided, find files that match any\npattern in the array.  If an expression is provided, the expression must\nreturn a string or an array of strings, which will then be evaluated as\none or more glob patterns.  Must only match and return files which\nactually exist.\n", 
                "type": [
                    "null", 
                    "string", 
                    "https://w3id.org/cwl/cwl#Expression", 
                    {
                        "items": "string", 
                        "type": "array"
                    }
                ], 
                "name": "https://w3id.org/cwl/cwl#CommandOutputBinding/glob"
            }, 
            {
                "doc": "For each file matched in `glob`, read up to\nthe first 64 KiB of text from the file and place it in the `contents`\nfield of the file object for manipulation by `outputEval`.\n", 
                "jsonldPredicate": "cwl:loadContents", 
                "type": [
                    "null", 
                    "boolean"
                ], 
                "name": "https://w3id.org/cwl/cwl#CommandOutputBinding/loadContents"
            }, 
            {
                "doc": "Evaluate an expression to generate the output value.  If `glob` was\nspecified, the value of `self` must be an array containing file objects\nthat were matched.  If no files were matched, `self` must be a zero\nlength array; if a single file was matched, the value of `self` is an\narray of a single element.  Additionally, if `loadContents` is `true`,\nthe File objects must include up to the first 64 KiB of file contents\nin the `contents` field.\n", 
                "type": [
                    "null", 
                    "string", 
                    "https://w3id.org/cwl/cwl#Expression"
                ], 
                "name": "https://w3id.org/cwl/cwl#CommandOutputBinding/outputEval"
            }
        ]
    }, 
    {
        "type": "record", 
        "specialize": [
            {
                "specializeFrom": "https://w3id.org/cwl/cwl#InputRecordSchema", 
                "specializeTo": "https://w3id.org/cwl/cwl#CommandInputRecordSchema"
            }, 
            {
                "specializeFrom": "https://w3id.org/cwl/cwl#InputEnumSchema", 
                "specializeTo": "https://w3id.org/cwl/cwl#CommandInputEnumSchema"
            }, 
            {
                "specializeFrom": "https://w3id.org/cwl/cwl#InputArraySchema", 
                "specializeTo": "https://w3id.org/cwl/cwl#CommandInputArraySchema"
            }, 
            {
                "specializeFrom": "https://w3id.org/cwl/cwl#InputBinding", 
                "specializeTo": "https://w3id.org/cwl/cwl#CommandLineBinding"
            }
        ], 
        "extends": "https://w3id.org/cwl/cwl#InputRecordField", 
        "name": "https://w3id.org/cwl/cwl#CommandInputRecordField"
    }, 
    {
        "type": "record", 
        "specialize": [
            {
                "specializeFrom": "https://w3id.org/cwl/cwl#InputRecordField", 
                "specializeTo": "https://w3id.org/cwl/cwl#CommandInputRecordField"
            }
        ], 
        "extends": "https://w3id.org/cwl/cwl#InputRecordSchema", 
        "name": "https://w3id.org/cwl/cwl#CommandInputRecordSchema"
    }, 
    {
        "type": "record", 
        "specialize": [
            {
                "specializeFrom": "https://w3id.org/cwl/cwl#InputBinding", 
                "specializeTo": "https://w3id.org/cwl/cwl#CommandLineBinding"
            }
        ], 
        "extends": "https://w3id.org/cwl/cwl#InputEnumSchema", 
        "name": "https://w3id.org/cwl/cwl#CommandInputEnumSchema"
    }, 
    {
        "type": "record", 
        "specialize": [
            {
                "specializeFrom": "https://w3id.org/cwl/cwl#InputRecordSchema", 
                "specializeTo": "https://w3id.org/cwl/cwl#CommandInputRecordSchema"
            }, 
            {
                "specializeFrom": "https://w3id.org/cwl/cwl#InputEnumSchema", 
                "specializeTo": "https://w3id.org/cwl/cwl#CommandInputEnumSchema"
            }, 
            {
                "specializeFrom": "https://w3id.org/cwl/cwl#InputArraySchema", 
                "specializeTo": "https://w3id.org/cwl/cwl#CommandInputArraySchema"
            }, 
            {
                "specializeFrom": "https://w3id.org/cwl/cwl#InputBinding", 
                "specializeTo": "https://w3id.org/cwl/cwl#CommandLineBinding"
            }
        ], 
        "extends": "https://w3id.org/cwl/cwl#InputArraySchema", 
        "name": "https://w3id.org/cwl/cwl#CommandInputArraySchema"
    }, 
    {
        "type": "record", 
        "specialize": [
            {
                "specializeFrom": "https://w3id.org/cwl/cwl#OutputRecordSchema", 
                "specializeTo": "https://w3id.org/cwl/cwl#CommandOutputRecordSchema"
            }, 
            {
                "specializeFrom": "https://w3id.org/cwl/cwl#OutputEnumSchema", 
                "specializeTo": "https://w3id.org/cwl/cwl#CommandOutputEnumSchema"
            }, 
            {
                "specializeFrom": "https://w3id.org/cwl/cwl#OutputArraySchema", 
                "specializeTo": "https://w3id.org/cwl/cwl#CommandOutputArraySchema"
            }, 
            {
                "specializeFrom": "https://w3id.org/cwl/cwl#OutputBinding", 
                "specializeTo": "https://w3id.org/cwl/cwl#CommandOutputBinding"
            }
        ], 
        "extends": "https://w3id.org/cwl/cwl#OutputRecordField", 
        "name": "https://w3id.org/cwl/cwl#CommandOutputRecordField"
    }, 
    {
        "type": "record", 
        "specialize": [
            {
                "specializeFrom": "https://w3id.org/cwl/cwl#OutputRecordField", 
                "specializeTo": "https://w3id.org/cwl/cwl#CommandOutputRecordField"
            }
        ], 
        "extends": "https://w3id.org/cwl/cwl#OutputRecordSchema", 
        "name": "https://w3id.org/cwl/cwl#CommandOutputRecordSchema"
    }, 
    {
        "type": "record", 
        "specialize": [
            {
                "specializeFrom": "https://w3id.org/cwl/cwl#OutputRecordSchema", 
                "specializeTo": "https://w3id.org/cwl/cwl#CommandOutputRecordSchema"
            }, 
            {
                "specializeFrom": "https://w3id.org/cwl/cwl#OutputEnumSchema", 
                "specializeTo": "https://w3id.org/cwl/cwl#CommandOutputEnumSchema"
            }, 
            {
                "specializeFrom": "https://w3id.org/cwl/cwl#OutputArraySchema", 
                "specializeTo": "https://w3id.org/cwl/cwl#CommandOutputArraySchema"
            }, 
            {
                "specializeFrom": "https://w3id.org/cwl/cwl#OutputBinding", 
                "specializeTo": "https://w3id.org/cwl/cwl#CommandOutputBinding"
            }
        ], 
        "extends": "https://w3id.org/cwl/cwl#OutputEnumSchema", 
        "name": "https://w3id.org/cwl/cwl#CommandOutputEnumSchema"
    }, 
    {
        "type": "record", 
        "specialize": [
            {
                "specializeFrom": "https://w3id.org/cwl/cwl#OutputRecordSchema", 
                "specializeTo": "https://w3id.org/cwl/cwl#CommandOutputRecordSchema"
            }, 
            {
                "specializeFrom": "https://w3id.org/cwl/cwl#OutputEnumSchema", 
                "specializeTo": "https://w3id.org/cwl/cwl#CommandOutputEnumSchema"
            }, 
            {
                "specializeFrom": "https://w3id.org/cwl/cwl#OutputArraySchema", 
                "specializeTo": "https://w3id.org/cwl/cwl#CommandOutputArraySchema"
            }, 
            {
                "specializeFrom": "https://w3id.org/cwl/cwl#OutputBinding", 
                "specializeTo": "https://w3id.org/cwl/cwl#CommandOutputBinding"
            }
        ], 
        "extends": "https://w3id.org/cwl/cwl#OutputArraySchema", 
        "name": "https://w3id.org/cwl/cwl#CommandOutputArraySchema"
    }, 
    {
        "type": "record", 
        "specialize": [
            {
                "specializeFrom": "https://w3id.org/cwl/cwl#InputRecordSchema", 
                "specializeTo": "https://w3id.org/cwl/cwl#CommandInputRecordSchema"
            }, 
            {
                "specializeFrom": "https://w3id.org/cwl/cwl#InputEnumSchema", 
                "specializeTo": "https://w3id.org/cwl/cwl#CommandInputEnumSchema"
            }, 
            {
                "specializeFrom": "https://w3id.org/cwl/cwl#InputArraySchema", 
                "specializeTo": "https://w3id.org/cwl/cwl#CommandInputArraySchema"
            }, 
            {
                "specializeFrom": "https://w3id.org/cwl/cwl#InputBinding", 
                "specializeTo": "https://w3id.org/cwl/cwl#CommandLineBinding"
            }
        ], 
        "extends": "https://w3id.org/cwl/cwl#InputParameter", 
        "name": "https://w3id.org/cwl/cwl#CommandInputParameter", 
        "doc": "An input parameter for a CommandLineTool."
    }, 
    {
        "extends": "https://w3id.org/cwl/cwl#OutputParameter", 
        "name": "https://w3id.org/cwl/cwl#CommandOutputParameter", 
        "doc": "An output parameter for a CommandLineTool.", 
        "fields": [
            {
                "doc": "Specify valid types of data that may be assigned to this parameter.\n", 
                "jsonldPredicate": {
                    "refScope": 2, 
                    "_type": "@vocab", 
                    "_id": "https://w3id.org/cwl/salad#type", 
                    "typeDSL": true
                }, 
                "type": [
                    "null", 
                    "https://w3id.org/cwl/cwl#CWLType", 
                    "https://w3id.org/cwl/cwl#stdout", 
                    "https://w3id.org/cwl/cwl#stderr", 
                    "https://w3id.org/cwl/cwl#CommandOutputRecordSchema", 
                    "https://w3id.org/cwl/cwl#CommandOutputEnumSchema", 
                    "https://w3id.org/cwl/cwl#CommandOutputArraySchema", 
                    "string", 
                    {
                        "items": [
                            "https://w3id.org/cwl/cwl#CWLType", 
                            "https://w3id.org/cwl/cwl#CommandOutputRecordSchema", 
                            "https://w3id.org/cwl/cwl#CommandOutputEnumSchema", 
                            "https://w3id.org/cwl/cwl#CommandOutputArraySchema", 
                            "string"
                        ], 
                        "type": "array"
                    }
                ], 
                "name": "https://w3id.org/cwl/cwl#CommandOutputParameter/type"
            }
        ], 
        "specialize": [
            {
                "specializeFrom": "https://w3id.org/cwl/cwl#OutputBinding", 
                "specializeTo": "https://w3id.org/cwl/cwl#CommandOutputBinding"
            }
        ], 
        "type": "record"
    }, 
    {
        "symbols": [
            "https://w3id.org/cwl/cwl#stdout"
        ], 
        "doc": "Only valid as a `type` for a `CommandLineTool` output with no\n`outputBinding` set.\n\nThe following\n```\noutputs:\n   an_output_name:\n   type: stdout\n\nstdout: a_stdout_file\n```\nis equivalent to\n```\noutputs:\n  an_output_name:\n    type: File\n    streamable: true\n    outputBinding:\n      glob: a_stdout_file\n\nstdout: a_stdout_file\n```\n\nIf there is no `stdout` name provided, a random filename will be created.\nFor example, the following\n```\noutputs:\n  an_output_name:\n    type: stdout\n```\nis equivalent to\n```\noutputs:\n  an_output_name:\n    type: File\n    streamable: true\n    outputBinding:\n      glob: random_stdout_filenameABCDEFG\n\nstdout: random_stdout_filenameABCDEFG\n```\n", 
        "docParent": "https://w3id.org/cwl/cwl#CommandOutputParameter", 
        "type": "enum", 
        "name": "https://w3id.org/cwl/cwl#stdout"
    }, 
    {
        "symbols": [
            "https://w3id.org/cwl/cwl#stderr"
        ], 
        "doc": "Only valid as a `type` for a `CommandLineTool` output with no\n`outputBinding` set.\n\nThe following\n```\noutputs:\n  an_output_name:\n  type: stderr\n\nstderr: a_stderr_file\n```\nis equivalent to\n```\noutputs:\n  an_output_name:\n    type: File\n    streamable: true\n    outputBinding:\n      glob: a_stderr_file\n\nstderr: a_stderr_file\n```\n\nIf there is no `stderr` name provided, a random filename will be created.\nFor example, the following\n```\noutputs:\n  an_output_name:\n    type: stderr\n```\nis equivalent to\n```\noutputs:\n  an_output_name:\n    type: File\n    streamable: true\n    outputBinding:\n      glob: random_stderr_filenameABCDEFG\n\nstderr: random_stderr_filenameABCDEFG\n```\n", 
        "docParent": "https://w3id.org/cwl/cwl#CommandOutputParameter", 
        "type": "enum", 
        "name": "https://w3id.org/cwl/cwl#stderr"
    }, 
    {
        "extends": "https://w3id.org/cwl/cwl#Process", 
        "name": "https://w3id.org/cwl/cwl#CommandLineTool", 
        "documentRoot": true, 
        "doc": "This defines the schema of the CWL Command Line Tool Description document.\n", 
        "specialize": [
            {
                "specializeFrom": "https://w3id.org/cwl/cwl#InputParameter", 
                "specializeTo": "https://w3id.org/cwl/cwl#CommandInputParameter"
            }, 
            {
                "specializeFrom": "https://w3id.org/cwl/cwl#OutputParameter", 
                "specializeTo": "https://w3id.org/cwl/cwl#CommandOutputParameter"
            }
        ], 
        "type": "record", 
        "fields": [
            {
                "jsonldPredicate": {
                    "_type": "@vocab", 
                    "_id": "@type"
                }, 
                "type": "string", 
                "name": "https://w3id.org/cwl/cwl#CommandLineTool/class"
            }, 
            {
                "doc": "Specifies the program to execute.  If an array, the first element of\nthe array is the command to execute, and subsequent elements are\nmandatory command line arguments.  The elements in `baseCommand` must\nappear before any command line bindings from `inputBinding` or\n`arguments`.\n\nIf `baseCommand` is not provided or is an empty array, the first\nelement of the command line produced after processing `inputBinding` or\n`arguments` must be used as the program to execute.\n\nIf the program includes a path separator character it must\nbe an absolute path, otherwise it is an error.  If the program does not\ninclude a path separator, search the `$PATH` variable in the runtime\nenvironment of the workflow runner find the absolute path of the\nexecutable.\n", 
                "jsonldPredicate": {
                    "_container": "@list", 
                    "_id": "https://w3id.org/cwl/cwl#baseCommand"
                }, 
                "type": [
                    "null", 
                    "string", 
                    {
                        "items": "string", 
                        "type": "array"
                    }
                ], 
                "name": "https://w3id.org/cwl/cwl#CommandLineTool/baseCommand"
            }, 
            {
                "doc": "Command line bindings which are not directly associated with input parameters.\n", 
                "jsonldPredicate": {
                    "_container": "@list", 
                    "_id": "https://w3id.org/cwl/cwl#arguments"
                }, 
                "type": [
                    "null", 
                    {
                        "items": [
                            "string", 
                            "https://w3id.org/cwl/cwl#Expression", 
                            "https://w3id.org/cwl/cwl#CommandLineBinding"
                        ], 
                        "type": "array"
                    }
                ], 
                "name": "https://w3id.org/cwl/cwl#CommandLineTool/arguments"
            }, 
            {
                "doc": "A path to a file whose contents must be piped into the command's\nstandard input stream.\n", 
                "type": [
                    "null", 
                    "string", 
                    "https://w3id.org/cwl/cwl#Expression"
                ], 
                "name": "https://w3id.org/cwl/cwl#CommandLineTool/stdin"
            }, 
            {
                "doc": "Capture the command's standard error stream to a file written to\nthe designated output directory.\n\nIf `stderr` is a string, it specifies the file name to use.\n\nIf `stderr` is an expression, the expression is evaluated and must\nreturn a string with the file name to use to capture stderr.  If the\nreturn value is not a string, or the resulting path contains illegal\ncharacters (such as the path separator `/`) it is an error.\n", 
                "jsonldPredicate": "https://w3id.org/cwl/cwl#stderr", 
                "type": [
                    "null", 
                    "string", 
                    "https://w3id.org/cwl/cwl#Expression"
                ], 
                "name": "https://w3id.org/cwl/cwl#CommandLineTool/stderr"
            }, 
            {
                "doc": "Capture the command's standard output stream to a file written to\nthe designated output directory.\n\nIf `stdout` is a string, it specifies the file name to use.\n\nIf `stdout` is an expression, the expression is evaluated and must\nreturn a string with the file name to use to capture stdout.  If the\nreturn value is not a string, or the resulting path contains illegal\ncharacters (such as the path separator `/`) it is an error.\n", 
                "jsonldPredicate": "https://w3id.org/cwl/cwl#stdout", 
                "type": [
                    "null", 
                    "string", 
                    "https://w3id.org/cwl/cwl#Expression"
                ], 
                "name": "https://w3id.org/cwl/cwl#CommandLineTool/stdout"
            }, 
            {
                "doc": "Exit codes that indicate the process completed successfully.\n", 
                "type": [
                    "null", 
                    {
                        "items": "int", 
                        "type": "array"
                    }
                ], 
                "name": "https://w3id.org/cwl/cwl#CommandLineTool/successCodes"
            }, 
            {
                "doc": "Exit codes that indicate the process failed due to a possibly\ntemporary condition, where executing the process with the same\nruntime environment and inputs may produce different results.\n", 
                "type": [
                    "null", 
                    {
                        "items": "int", 
                        "type": "array"
                    }
                ], 
                "name": "https://w3id.org/cwl/cwl#CommandLineTool/temporaryFailCodes"
            }, 
            {
                "doc": "Exit codes that indicate the process failed due to a permanent logic error, where executing the process with the same runtime environment and same inputs is expected to always fail.", 
                "type": [
                    "null", 
                    {
                        "items": "int", 
                        "type": "array"
                    }
                ], 
                "name": "https://w3id.org/cwl/cwl#CommandLineTool/permanentFailCodes"
            }
        ]
    }, 
    {
        "type": "record", 
        "doc": "Indicates that a workflow component should be run in a\n[Docker](http://docker.com) container, and specifies how to fetch or build\nthe image.\n\nIf a CommandLineTool lists `DockerRequirement` under\n`hints` (or `requirements`), it may (or must) be run in the specified Docker\ncontainer.\n\nThe platform must first acquire or install the correct Docker image as\nspecified by `dockerPull`, `dockerImport`, `dockerLoad` or `dockerFile`.\n\nThe platform must execute the tool in the container using `docker run` with\nthe appropriate Docker image and tool command line.\n\nThe workflow platform may provide input files and the designated output\ndirectory through the use of volume bind mounts.  The platform may rewrite\nfile paths in the input object to correspond to the Docker bind mounted\nlocations.\n\nWhen running a tool contained in Docker, the workflow platform must not\nassume anything about the contents of the Docker container, such as the\npresence or absence of specific software, except to assume that the\ngenerated command line represents a valid command within the runtime\nenvironment of the container.\n\n## Interaction with other requirements\n\nIf [EnvVarRequirement](#EnvVarRequirement) is specified alongside a\nDockerRequirement, the environment variables must be provided to Docker\nusing `--env` or `--env-file` and interact with the container's preexisting\nenvironment as defined by Docker.\n", 
        "extends": "https://w3id.org/cwl/cwl#ProcessRequirement", 
        "name": "https://w3id.org/cwl/cwl#DockerRequirement", 
        "fields": [
            {
                "doc": "Always 'DockerRequirement'", 
                "jsonldPredicate": {
                    "_type": "@vocab", 
                    "_id": "@type"
                }, 
                "type": "string", 
                "name": "https://w3id.org/cwl/cwl#DockerRequirement/class"
            }, 
            {
                "doc": "Specify a Docker image to retrieve using `docker pull`.", 
                "type": [
                    "null", 
                    "string"
                ], 
                "name": "https://w3id.org/cwl/cwl#DockerRequirement/dockerPull"
            }, 
            {
                "doc": "Specify a HTTP URL from which to download a Docker image using `docker load`.", 
                "type": [
                    "null", 
                    "string"
                ], 
                "name": "https://w3id.org/cwl/cwl#DockerRequirement/dockerLoad"
            }, 
            {
                "doc": "Supply the contents of a Dockerfile which will be built using `docker build`.", 
                "type": [
                    "null", 
                    "string"
                ], 
                "name": "https://w3id.org/cwl/cwl#DockerRequirement/dockerFile"
            }, 
            {
                "doc": "Provide HTTP URL to download and gunzip a Docker images using `docker import.", 
                "type": [
                    "null", 
                    "string"
                ], 
                "name": "https://w3id.org/cwl/cwl#DockerRequirement/dockerImport"
            }, 
            {
                "doc": "The image id that will be used for `docker run`.  May be a\nhuman-readable image name or the image identifier hash.  May be skipped\nif `dockerPull` is specified, in which case the `dockerPull` image id\nmust be used.\n", 
                "type": [
                    "null", 
                    "string"
                ], 
                "name": "https://w3id.org/cwl/cwl#DockerRequirement/dockerImageId"
            }, 
            {
                "doc": "Set the designated output directory to a specific location inside the\nDocker container.\n", 
                "type": [
                    "null", 
                    "string"
                ], 
                "name": "https://w3id.org/cwl/cwl#DockerRequirement/dockerOutputDirectory"
            }
        ]
    }, 
    {
        "type": "record", 
        "doc": "A list of software packages that should be configured in the environment of\nthe defined process.\n", 
        "extends": "https://w3id.org/cwl/cwl#ProcessRequirement", 
        "name": "https://w3id.org/cwl/cwl#SoftwareRequirement", 
        "fields": [
            {
                "doc": "Always 'SoftwareRequirement'", 
                "jsonldPredicate": {
                    "_type": "@vocab", 
                    "_id": "@type"
                }, 
                "type": "string", 
                "name": "https://w3id.org/cwl/cwl#SoftwareRequirement/class"
            }, 
            {
                "doc": "The list of software to be configured.", 
                "jsonldPredicate": {
                    "mapSubject": "package", 
                    "mapPredicate": "specs"
                }, 
                "type": {
                    "items": "https://w3id.org/cwl/cwl#SoftwarePackage", 
                    "type": "array"
                }, 
                "name": "https://w3id.org/cwl/cwl#SoftwareRequirement/packages"
            }
        ]
    }, 
    {
        "fields": [
            {
                "doc": "The common name of the software to be configured.", 
                "type": "string", 
                "name": "https://w3id.org/cwl/cwl#SoftwarePackage/package"
            }, 
            {
                "doc": "The (optional) version of the software to configured.", 
                "type": [
                    "null", 
                    {
                        "items": "string", 
                        "type": "array"
                    }
                ], 
                "name": "https://w3id.org/cwl/cwl#SoftwarePackage/version"
            }, 
            {
                "doc": "Must be one or more IRIs identifying resources for installing or\nenabling the software.  Implementations may provide resolvers which map\nwell-known software spec IRIs to some configuration action.\n\nFor example, an IRI `https://packages.debian.org/jessie/bowtie` could\nbe resolved with `apt-get install bowtie`.  An IRI\n`https://anaconda.org/bioconda/bowtie` could be resolved with `conda\ninstall -c bioconda bowtie`.\n\nTools may also provide IRIs to index entries such as\n[RRID](http://www.identifiers.org/rrid/), such as\n`http://identifiers.org/rrid/RRID:SCR_005476`\n", 
                "type": [
                    "null", 
                    {
                        "items": "string", 
                        "type": "array"
                    }
                ], 
                "name": "https://w3id.org/cwl/cwl#SoftwarePackage/specs"
            }
        ], 
        "type": "record", 
        "name": "https://w3id.org/cwl/cwl#SoftwarePackage"
    }, 
    {
        "doc": "Define a file or subdirectory that must be placed in the designated output\ndirectory prior to executing the command line tool.  May be the result of\nexecuting an expression, such as building a configuration file from a\ntemplate.\n", 
        "type": "record", 
        "name": "https://w3id.org/cwl/cwl#Dirent", 
        "fields": [
            {
                "doc": "The name of the file or subdirectory to create in the output directory.\nIf `entry` is a File or Directory, this overrides `basename`.  Optional.\n", 
                "jsonldPredicate": {
                    "_id": "https://w3id.org/cwl/cwl#entryname"
                }, 
                "type": [
                    "null", 
                    "string", 
                    "https://w3id.org/cwl/cwl#Expression"
                ], 
                "name": "https://w3id.org/cwl/cwl#Dirent/entryname"
            }, 
            {
                "doc": "If the value is a string literal or an expression which evaluates to a\nstring, a new file must be created with the string as the file contents.\n\nIf the value is an expression that evaluates to a `File` object, this\nindicates the referenced file should be added to the designated output\ndirectory prior to executing the tool.\n\nIf the value is an expression that evaluates to a `Dirent` object, this\nindicates that the File or Directory in `entry` should be added to the\ndesignated output directory with the name in `entryname`.\n\nIf `writable` is false, the file may be made available using a bind\nmount or file system link to avoid unnecessary copying of the input\nfile.\n", 
                "jsonldPredicate": {
                    "_id": "https://w3id.org/cwl/cwl#entry"
                }, 
                "type": [
                    "string", 
                    "https://w3id.org/cwl/cwl#Expression"
                ], 
                "name": "https://w3id.org/cwl/cwl#Dirent/entry"
            }, 
            {
                "doc": "If true, the file or directory must be writable by the tool.  Changes\nto the file or directory must be isolated and not visible by any other\nCommandLineTool process.  This may be implemented by making a copy of\nthe original file or directory.  Default false (files and directories\nread-only by default).\n", 
                "type": [
                    "null", 
                    "boolean"
                ], 
                "name": "https://w3id.org/cwl/cwl#Dirent/writable"
            }
        ]
    }, 
    {
        "type": "record", 
        "doc": "Define a list of files and subdirectories that must be created by the workflow platform in the designated output directory prior to executing the command line tool.", 
        "extends": "https://w3id.org/cwl/cwl#ProcessRequirement", 
        "name": "https://w3id.org/cwl/cwl#InitialWorkDirRequirement", 
        "fields": [
            {
                "doc": "InitialWorkDirRequirement", 
                "jsonldPredicate": {
                    "_type": "@vocab", 
                    "_id": "@type"
                }, 
                "type": "string", 
                "name": "https://w3id.org/cwl/cwl#InitialWorkDirRequirement/class"
            }, 
            {
                "doc": "The list of files or subdirectories that must be placed in the\ndesignated output directory prior to executing the command line tool.\n\nMay be an expression.  If so, the expression return value must validate\nas `{type: array, items: [File, Directory]}`.\n", 
                "jsonldPredicate": {
                    "_id": "https://w3id.org/cwl/cwl#listing"
                }, 
                "type": [
                    {
                        "items": [
                            "https://w3id.org/cwl/cwl#File", 
                            "https://w3id.org/cwl/cwl#Directory", 
                            "https://w3id.org/cwl/cwl#Dirent", 
                            "string", 
                            "https://w3id.org/cwl/cwl#Expression"
                        ], 
                        "type": "array"
                    }, 
                    "string", 
                    "https://w3id.org/cwl/cwl#Expression"
                ], 
                "name": "https://w3id.org/cwl/cwl#InitialWorkDirRequirement/listing"
            }
        ]
    }, 
    {
        "type": "record", 
        "doc": "Define a list of environment variables which will be set in the\nexecution environment of the tool.  See `EnvironmentDef` for details.\n", 
        "extends": "https://w3id.org/cwl/cwl#ProcessRequirement", 
        "name": "https://w3id.org/cwl/cwl#EnvVarRequirement", 
        "fields": [
            {
                "doc": "Always 'EnvVarRequirement'", 
                "jsonldPredicate": {
                    "_type": "@vocab", 
                    "_id": "@type"
                }, 
                "type": "string", 
                "name": "https://w3id.org/cwl/cwl#EnvVarRequirement/class"
            }, 
            {
                "doc": "The list of environment variables.", 
                "jsonldPredicate": {
                    "mapSubject": "envName", 
                    "mapPredicate": "envValue"
                }, 
                "type": {
                    "items": "https://w3id.org/cwl/cwl#EnvironmentDef", 
                    "type": "array"
                }, 
                "name": "https://w3id.org/cwl/cwl#EnvVarRequirement/envDef"
            }
        ]
    }, 
    {
        "type": "record", 
        "doc": "Modify the behavior of CommandLineTool to generate a single string\ncontaining a shell command line.  Each item in the argument list must be\njoined into a string separated by single spaces and quoted to prevent\nintepretation by the shell, unless `CommandLineBinding` for that argument\ncontains `shellQuote: false`.  If `shellQuote: false` is specified, the\nargument is joined into the command string without quoting, which allows\nthe use of shell metacharacters such as `|` for pipes.\n", 
        "extends": "https://w3id.org/cwl/cwl#ProcessRequirement", 
        "name": "https://w3id.org/cwl/cwl#ShellCommandRequirement", 
        "fields": [
            {
                "doc": "Always 'ShellCommandRequirement'", 
                "jsonldPredicate": {
                    "_type": "@vocab", 
                    "_id": "@type"
                }, 
                "type": "string", 
                "name": "https://w3id.org/cwl/cwl#ShellCommandRequirement/class"
            }
        ]
    }, 
    {
        "type": "record", 
        "doc": "Specify basic hardware resource requirements.\n\n\"min\" is the minimum amount of a resource that must be reserved to schedule\na job. If \"min\" cannot be satisfied, the job should not be run.\n\n\"max\" is the maximum amount of a resource that the job shall be permitted\nto use. If a node has sufficient resources, multiple jobs may be scheduled\non a single node provided each job's \"max\" resource requirements are\nmet. If a job attempts to exceed its \"max\" resource allocation, an\nimplementation may deny additional resources, which may result in job\nfailure.\n\nIf \"min\" is specified but \"max\" is not, then \"max\" == \"min\"\nIf \"max\" is specified by \"min\" is not, then \"min\" == \"max\".\n\nIt is an error if max < min.\n\nIt is an error if the value of any of these fields is negative.\n\nIf neither \"min\" nor \"max\" is specified for a resource, an implementation may provide a default.\n", 
        "extends": "https://w3id.org/cwl/cwl#ProcessRequirement", 
        "name": "https://w3id.org/cwl/cwl#ResourceRequirement", 
        "fields": [
            {
                "doc": "Always 'ResourceRequirement'", 
                "jsonldPredicate": {
                    "_type": "@vocab", 
                    "_id": "@type"
                }, 
                "type": "string", 
                "name": "https://w3id.org/cwl/cwl#ResourceRequirement/class"
            }, 
            {
                "doc": "Minimum reserved number of CPU cores", 
                "type": [
                    "null", 
                    "long", 
                    "string", 
                    "https://w3id.org/cwl/cwl#Expression"
                ], 
                "name": "https://w3id.org/cwl/cwl#ResourceRequirement/coresMin"
            }, 
            {
                "doc": "Maximum reserved number of CPU cores", 
                "type": [
                    "null", 
                    "int", 
                    "string", 
                    "https://w3id.org/cwl/cwl#Expression"
                ], 
                "name": "https://w3id.org/cwl/cwl#ResourceRequirement/coresMax"
            }, 
            {
                "doc": "Minimum reserved RAM in mebibytes (2**20)", 
                "type": [
                    "null", 
                    "long", 
                    "string", 
                    "https://w3id.org/cwl/cwl#Expression"
                ], 
                "name": "https://w3id.org/cwl/cwl#ResourceRequirement/ramMin"
            }, 
            {
                "doc": "Maximum reserved RAM in mebibytes (2**20)", 
                "type": [
                    "null", 
                    "long", 
                    "string", 
                    "https://w3id.org/cwl/cwl#Expression"
                ], 
                "name": "https://w3id.org/cwl/cwl#ResourceRequirement/ramMax"
            }, 
            {
                "doc": "Minimum reserved filesystem based storage for the designated temporary directory, in mebibytes (2**20)", 
                "type": [
                    "null", 
                    "long", 
                    "string", 
                    "https://w3id.org/cwl/cwl#Expression"
                ], 
                "name": "https://w3id.org/cwl/cwl#ResourceRequirement/tmpdirMin"
            }, 
            {
                "doc": "Maximum reserved filesystem based storage for the designated temporary directory, in mebibytes (2**20)", 
                "type": [
                    "null", 
                    "long", 
                    "string", 
                    "https://w3id.org/cwl/cwl#Expression"
                ], 
                "name": "https://w3id.org/cwl/cwl#ResourceRequirement/tmpdirMax"
            }, 
            {
                "doc": "Minimum reserved filesystem based storage for the designated output directory, in mebibytes (2**20)", 
                "type": [
                    "null", 
                    "long", 
                    "string", 
                    "https://w3id.org/cwl/cwl#Expression"
                ], 
                "name": "https://w3id.org/cwl/cwl#ResourceRequirement/outdirMin"
            }, 
            {
                "doc": "Maximum reserved filesystem based storage for the designated output directory, in mebibytes (2**20)", 
                "type": [
                    "null", 
                    "long", 
                    "string", 
                    "https://w3id.org/cwl/cwl#Expression"
                ], 
                "name": "https://w3id.org/cwl/cwl#ResourceRequirement/outdirMax"
            }
        ]
    }, 
    {
        "doc": [
            "# Common Workflow Language (CWL) Workflow Description, v1.0\n\nThis version:\n  * https://w3id.org/cwl/v1.0/\n\nCurrent version:\n  * https://w3id.org/cwl/\n", 
            "\n\n", 
            "Authors:\n\n* Peter Amstutz <peter.amstutz@curoverse.com>, Arvados Project, Curoverse\n* Michael R. Crusoe <michael.crusoe@gmail.com>, Common Workflow Language\n  project\n* Neboj\u0161a Tijani\u0107 <nebojsa.tijanic@sbgenomics.com>, Seven Bridges Genomics\n\nContributors:\n\n* Brad Chapman <bchapman@hsph.harvard.edu>, Harvard Chan School of Public Health\n* John Chilton <jmchilton@gmail.com>, Galaxy Project, Pennsylvania State University\n* Michael Heuer <heuermh@berkeley.edu,>,UC Berkeley AMPLab\n* Andrey Kartashov <Andrey.Kartashov@cchmc.org>, Cincinnati Children's Hospital\n* Dan Leehr <dan.leehr@duke.edu>, Duke University\n* Herv\u00e9 M\u00e9nager <herve.menager@gmail.com>, Institut Pasteur\n* Maya Nedeljkovich <maja.nedeljkovic@sbgenomics.com>, Seven Bridges Genomics\n* Matt Scales <mscales@icr.ac.uk>, Institute of Cancer Research, London\n* Stian Soiland-Reyes [soiland-reyes@cs.manchester.ac.uk](mailto:soiland-reyes@cs.manchester.ac.uk), University of Manchester\n* Luka Stojanovic <luka.stojanovic@sbgenomics.com>, Seven Bridges Genomics\n", 
            "\n\n", 
            "# Abstract\n\nOne way to define a workflow is: an analysis task represented by a\ndirected graph describing a sequence of operations that transform an\ninput data set to output. This specification defines the Common Workflow\nLanguage (CWL) Workflow description, a vendor-neutral standard for\nrepresenting workflows intended to be portable across a variety of\ncomputing platforms.\n", 
            "# Status of this document\n\nThis document is the product of the [Common Workflow Language working\ngroup](https://groups.google.com/forum/#!forum/common-workflow-language).  The\nlatest version of this document is available in the \"v1.0\" directory at\n\nhttps://github.com/common-workflow-language/common-workflow-language\n\nThe products of the CWL working group (including this document) are made available\nunder the terms of the Apache License, version 2.0.\n\n<!--ToC-->\n\n# Introduction\n\nThe Common Workflow Language (CWL) working group is an informal, multi-vendor\nworking group consisting of various organizations and individuals that have an\ninterest in portability of data analysis workflows.  The goal is to create\nspecifications like this one that enable data scientists to describe analysis\ntools and workflows that are powerful, easy to use, portable, and support\nreproducibility.\n", 
            "\n## Introduction to CWL Workflow standard v1.0\n\nThis specification represents the first full release from the CWL group.\nSince draft-3, this draft introduces the following changes and additions\nto the CWL Workflow standard:\n\n  * The `inputs` and `outputs` fields have been renamed `in` and `out`.\n  * Syntax simplifcations: denoted by the `map<>` syntax. Example: `in`\n    contains a list of items, each with an id. Now one can specify\n    a mapping of that identifier to the corresponding\n    `InputParameter`.\n    ```\n    in:\n     - id: one\n       type: string\n       doc: First input parameter\n     - id: two\n       type: int\n       doc: Second input parameter\n    ```\n    can be\n    ```\n    in:\n     one:\n      type: string\n      doc: First input parameter\n     two:\n      type: int\n      doc: Second input parameter\n    ```\n  * The common field `description` has been renamed to `doc`.\n\n## Purpose\n\nThe Common Workflow Language Command Line Tool Description express\nworkflows for data-intensive science, such as Bioinformatics, Chemistry,\nPhysics, and Astronomy.  This specification is intended to define a data\nand execution model for Workflows that can be implemented on top of a\nvariety of computing platforms, ranging from an individual workstation to\ncluster, grid, cloud, and high performance computing systems.\n", 
            "## References to other specifications\n\n**Javascript Object Notation (JSON)**: http://json.org\n\n**JSON Linked Data (JSON-LD)**: http://json-ld.org\n\n**YAML**: http://yaml.org\n\n**Avro**: https://avro.apache.org/docs/1.8.1/spec.html\n\n**Uniform Resource Identifier (URI) Generic Syntax**: https://tools.ietf.org/html/rfc3986)\n\n**Internationalized Resource Identifiers (IRIs)**:\nhttps://tools.ietf.org/html/rfc3987\n\n**Portable Operating System Interface (POSIX.1-2008)**: http://pubs.opengroup.org/onlinepubs/9699919799/\n\n**Resource Description Framework (RDF)**: http://www.w3.org/RDF/\n\n## Scope\n\nThis document describes CWL syntax, execution, and object model.  It\nis not intended to document a CWL specific implementation, however it may\nserve as a reference for the behavior of conforming implementations.\n\n## Terminology\n\nThe terminology used to describe CWL documents is defined in the\nConcepts section of the specification. The terms defined in the\nfollowing list are used in building those definitions and in describing the\nactions of a CWL implementation:\n\n**may**: Conforming CWL documents and CWL implementations are permitted but\nnot required to behave as described.\n\n**must**: Conforming CWL documents and CWL implementations are required to behave\nas described; otherwise they are in error.\n\n**error**: A violation of the rules of this specification; results are\nundefined. Conforming implementations may detect and report an error and may\nrecover from it.\n\n**fatal error**: A violation of the rules of this specification; results are\nundefined. Conforming implementations must not continue to execute the current\nprocess and may report an error.\n\n**at user option**: Conforming software may or must (depending on the modal verb in\nthe sentence) behave as described; if it does, it must provide users a means to\nenable or disable the behavior described.\n\n**deprecated**: Conforming software may implement a behavior for backwards\ncompatibility.  Portable CWL documents should not rely on deprecated behavior.\nBehavior marked as deprecated may be removed entirely from future revisions of\nthe CWL specification.\n\n# Data model\n\n## Data concepts\n\nAn **object** is a data structure equivalent to the \"object\" type in JSON,\nconsisting of a unordered set of name/value pairs (referred to here as\n**fields**) and where the name is a string and the value is a string, number,\nboolean, array, or object.\n\nA **document** is a file containing a serialized object, or an array of objects.\n\nA **process** is a basic unit of computation which accepts input data,\nperforms some computation, and produces output data. Examples include\nCommandLineTools, Workflows, and ExpressionTools.\n\nAn **input object** is an object describing the inputs to an invocation of\na process.\n\nAn **output object** is an object describing the output resulting from an\ninvocation of a process.\n\nAn **input schema** describes the valid format (required fields, data types)\nfor an input object.\n\nAn **output schema** describes the valid format for an output object.\n\n**Metadata** is information about workflows, tools, or input items.\n\n## Syntax\n\nCWL documents must consist of an object or array of objects represented using\nJSON or YAML syntax.  Upon loading, a CWL implementation must apply the\npreprocessing steps described in the\n[Semantic Annotations for Linked Avro Data (SALAD) Specification](SchemaSalad.html).\nAn implementation may formally validate the structure of a CWL document using\nSALAD schemas located at\nhttps://github.com/common-workflow-language/common-workflow-language/tree/master/v1.0\n\n## Identifiers\n\nIf an object contains an `id` field, that is used to uniquely identify the\nobject in that document.  The value of the `id` field must be unique over the\nentire document.  Identifiers may be resolved relative to either the document\nbase and/or other identifiers following the rules are described in the\n[Schema Salad specification](SchemaSalad.html#Identifier_resolution).\n\nAn implementation may choose to only honor references to object types for\nwhich the `id` field is explicitly listed in this specification.\n\n## Document preprocessing\n\nAn implementation must resolve [$import](SchemaSalad.html#Import) and\n[$include](SchemaSalad.html#Import) directives as described in the\n[Schema Salad specification](SchemaSalad.html).\n\nAnother transformation defined in Schema salad is simplification of data type definitions.\nType `<T>` ending with `?` should be transformed to `[<T>, \"null\"]`.\nType `<T>` ending with `[]` should be transformed to `{\"type\": \"array\", \"items\": <T>}`\n\n## Extensions and metadata\n\nInput metadata (for example, a lab sample identifier) may be represented within\na tool or workflow using input parameters which are explicitly propagated to\noutput.  Future versions of this specification may define additional facilities\nfor working with input/output metadata.\n\nImplementation extensions not required for correct execution (for example,\nfields related to GUI presentation) and metadata about the tool or workflow\nitself (for example, authorship for use in citations) may be provided as\nadditional fields on any object.  Such extensions fields must use a namespace\nprefix listed in the `$namespaces` section of the document as described in the\n[Schema Salad specification](SchemaSalad.html#Explicit_context).\n\nImplementation extensions which modify execution semantics must be [listed in\nthe `requirements` field](#Requirements_and_hints).\n\n# Execution model\n\n## Execution concepts\n\nA **parameter** is a named symbolic input or output of process, with an\nassociated datatype or schema.  During execution, values are assigned to\nparameters to make the input object or output object used for concrete\nprocess invocation.\n\nA **CommandLineTool** is a process characterized by the execution of a\nstandalone, non-interactive program which is invoked on some input,\nproduces output, and then terminates.\n\nA **workflow** is a process characterized by multiple subprocess steps,\nwhere step outputs are connected to the inputs of downstream steps to\nform a directed acylic graph, and independent steps may run concurrently.\n\nA **runtime environment** is the actual hardware and software environment when\nexecuting a command line tool.  It includes, but is not limited to, the\nhardware architecture, hardware resources, operating system, software runtime\n(if applicable, such as the specific Python interpreter or the specific Java\nvirtual machine), libraries, modules, packages, utilities, and data files\nrequired to run the tool.\n\nA **workflow platform** is a specific hardware and software implementation\ncapable of interpreting CWL documents and executing the processes specified by\nthe document.  The responsibilities of the workflow platform may include\nscheduling process invocation, setting up the necessary runtime environment,\nmaking input data available, invoking the tool process, and collecting output.\n\nA workflow platform may choose to only implement the Command Line Tool\nDescription part of the CWL specification.\n\nIt is intended that the workflow platform has broad leeway outside of this\nspecification to optimize use of computing resources and enforce policies\nnot covered by this specification.  Some areas that are currently out of\nscope for CWL specification but may be handled by a specific workflow\nplatform include:\n\n* Data security and permissions\n* Scheduling tool invocations on remote cluster or cloud compute nodes.\n* Using virtual machines or operating system containers to manage the runtime\n(except as described in [DockerRequirement](CommandLineTool.html#DockerRequirement)).\n* Using remote or distributed file systems to manage input and output files.\n* Transforming file paths.\n* Determining if a process has previously been executed, and if so skipping it\nand reusing previous results.\n* Pausing, resuming or checkpointing processes or workflows.\n\nConforming CWL processes must not assume anything about the runtime\nenvironment or workflow platform unless explicitly declared though the use\nof [process requirements](#Requirements_and_hints).\n\n## Generic execution process\n\nThe generic execution sequence of a CWL process (including workflows and\ncommand line line tools) is as follows.\n\n1. Load, process and validate a CWL document, yielding a process object.\n2. Load input object.\n3. Validate the input object against the `inputs` schema for the process.\n4. Validate process requirements are met.\n5. Perform any further setup required by the specific process type.\n6. Execute the process.\n7. Capture results of process execution into the output object.\n8. Validate the output object against the `outputs` schema for the process.\n9. Report the output object to the process caller.\n\n## Requirements and hints\n\nA **process requirement** modifies the semantics or runtime\nenvironment of a process.  If an implementation cannot satisfy all\nrequirements, or a requirement is listed which is not recognized by the\nimplementation, it is a fatal error and the implementation must not attempt\nto run the process, unless overridden at user option.\n\nA **hint** is similar to a requirement; however, it is not an error if an\nimplementation cannot satisfy all hints.  The implementation may report a\nwarning if a hint cannot be satisfied.\n\nRequirements are inherited.  A requirement specified in a Workflow applies\nto all workflow steps; a requirement specified on a workflow step will\napply to the process implementation of that step and any of its substeps.\n\nIf the same process requirement appears at different levels of the\nworkflow, the most specific instance of the requirement is used, that is,\nan entry in `requirements` on a process implementation such as\nCommandLineTool will take precedence over an entry in `requirements`\nspecified in a workflow step, and an entry in `requirements` on a workflow\nstep takes precedence over the workflow.  Entries in `hints` are resolved\nthe same way.\n\nRequirements override hints.  If a process implementation provides a\nprocess requirement in `hints` which is also provided in `requirements` by\nan enclosing workflow or workflow step, the enclosing `requirements` takes\nprecedence.\n\n## Parameter references\n\nParameter references are denoted by the syntax `$(...)` and may be used in any\nfield permitting the pseudo-type `Expression`, as specified by this document.\nConforming implementations must support parameter references.  Parameter\nreferences use the following subset of\n[Javascript/ECMAScript 5.1](http://www.ecma-international.org/ecma-262/5.1/)\nsyntax, but they are designed to not require a Javascript engine for evaluation.\n\nIn the following BNF grammar, character classes, and grammar rules are denoted\nin '{}', '-' denotes exclusion from a character class, '(())' denotes grouping,\n'|' denotes alternates, trailing '*' denotes zero or more repeats, '+' denote\none or more repeats, '/' escapes these special characters, and all other\ncharacters are literal values.\n\n<p>\n<table class=\"table\">\n<tr><td>symbol::             </td><td>{Unicode alphanumeric}+</td></tr>\n<tr><td>singleq::            </td><td>[' (( {character - '} | \\' ))* ']</td></tr>\n<tr><td>doubleq::            </td><td>[\" (( {character - \"} | \\\" ))* \"]</td></tr>\n<tr><td>index::              </td><td>[ {decimal digit}+ ]</td></tr>\n<tr><td>segment::            </td><td>. {symbol} | {singleq} | {doubleq} | {index}</td></tr>\n<tr><td>parameter reference::</td><td>$( {symbol} {segment}*)</td></tr>\n</table>\n</p>\n\nUse the following algorithm to resolve a parameter reference:\n\n  1. Match the leading symbol as the key\n  2. Look up the key in the parameter context (described below) to get the current value.\n     It is an error if the key is not found in the parameter context.\n  3. If there are no subsequent segments, terminate and return current value\n  4. Else, match the next segment\n  5. Extract the symbol, string, or index from the segment as the key\n  6. Look up the key in current value and assign as new current value.  If\n     the key is a symbol or string, the current value must be an object.\n     If the key is an index, the current value must be an array or string.\n     It is an error if the key does not match the required type, or the key is not found or out\n     of range.\n  7. Repeat steps 3-6\n\nThe root namespace is the parameter context.  The following parameters must\nbe provided:\n\n  * `inputs`: The input object to the current Process.\n  * `self`: A context-specific value.  The contextual values for 'self' are\n    documented for specific fields elsewhere in this specification.  If\n    a contextual value of 'self' is not documented for a field, it\n    must be 'null'.\n  * `runtime`: An object containing configuration details.  Specific to the\n    process type.  An implementation may provide\n    opaque strings for any or all fields of `runtime`.  These must be\n    filled in by the platform after processing the Tool but before actual\n    execution.  Parameter references and expressions may only use the\n    literal string value of the field and must not perform computation on\n    the contents, except where noted otherwise.\n\nIf the value of a field has no leading or trailing non-whitespace\ncharacters around a parameter reference, the effective value of the field\nbecomes the value of the referenced parameter, preserving the return type.\n\nIf the value of a field has non-whitespace leading or trailing characters\naround a parameter reference, it is subject to string interpolation.  The\neffective value of the field is a string containing the leading characters,\nfollowed by the string value of the parameter reference, followed by the\ntrailing characters.  The string value of the parameter reference is its\ntextual JSON representation with the following rules:\n\n  * Leading and trailing quotes are stripped from strings\n  * Objects entries are sorted by key\n\nMultiple parameter references may appear in a single field.  This case\nmust be treated as a string interpolation.  After interpolating the first\nparameter reference, interpolation must be recursively applied to the\ntrailing characters to yield the final string value.\n\n## Expressions\n\nAn expression is a fragment of [Javascript/ECMAScript\n5.1](http://www.ecma-international.org/ecma-262/5.1/) code evaluated by the\nworkflow platform to affect the inputs, outputs, or\nbehavior of a process.  In the generic execution sequence, expressions may\nbe evaluated during step 5 (process setup), step 6 (execute process),\nand/or step 7 (capture output).  Expressions are distinct from regular\nprocesses in that they are intended to modify the behavior of the workflow\nitself rather than perform the primary work of the workflow.\n\nTo declare the use of expressions, the document must include the process\nrequirement `InlineJavascriptRequirement`.  Expressions may be used in any\nfield permitting the pseudo-type `Expression`, as specified by this\ndocument.\n\nExpressions are denoted by the syntax `$(...)` or `${...}`.  A code\nfragment wrapped in the `$(...)` syntax must be evaluated as a\n[ECMAScript expression](http://www.ecma-international.org/ecma-262/5.1/#sec-11).  A\ncode fragment wrapped in the `${...}` syntax must be evaluated as a\n[EMACScript function body](http://www.ecma-international.org/ecma-262/5.1/#sec-13)\nfor an anonymous, zero-argument function.  Expressions must return a valid JSON\ndata type: one of null, string, number, boolean, array, object. Other return\nvalues must result in a `permanentFailure`. Implementations must permit any\nsyntactically valid Javascript and account for nesting of parenthesis or braces\nand that strings that may contain parenthesis or braces when scanning for\nexpressions.\n\nThe runtime must include any code defined in the [\"expressionLib\" field of\nInlineJavascriptRequirement](#InlineJavascriptRequirement) prior to\nexecuting the actual expression.\n\nBefore executing the expression, the runtime must initialize as global\nvariables the fields of the parameter context described above.\n\nThe effective value of the field after expression evaluation follows the\nsame rules as parameter references discussed above.  Multiple expressions\nmay appear in a single field.\n\nExpressions must be evaluated in an isolated context (a \"sandbox\") which\npermits no side effects to leak outside the context.  Expressions also must\nbe evaluated in [Javascript strict mode](http://www.ecma-international.org/ecma-262/5.1/#sec-4.2.2).\n\nThe order in which expressions are evaluated is undefined except where\notherwise noted in this document.\n\nAn implementation may choose to implement parameter references by\nevaluating as a Javascript expression.  The results of evaluating\nparameter references must be identical whether implemented by Javascript\nevaluation or some other means.\n\nImplementations may apply other limits, such as process isolation, timeouts,\nand operating system containers/jails to minimize the security risks associated\nwith running untrusted code embedded in a CWL document.\n\nExceptions thrown from an exception must result in a `permanentFailure` of the\nprocess.\n\n## Executing CWL documents as scripts\n\nBy convention, a CWL document may begin with `#!/usr/bin/env cwl-runner`\nand be marked as executable (the POSIX \"+x\" permission bits) to enable it\nto be executed directly.  A workflow platform may support this mode of\noperation; if so, it must provide `cwl-runner` as an alias for the\nplatform's CWL implementation.\n\nA CWL input object document may similarly begin with `#!/usr/bin/env\ncwl-runner` and be marked as executable.  In this case, the input object\nmust include the field `cwl:tool` supplying an IRI to the default CWL\ndocument that should be executed using the fields of the input object as\ninput parameters.\n\n## Discovering CWL documents on a local filesystem\n\nTo discover CWL documents look in the following locations:\n\n`/usr/share/commonwl/`\n\n`/usr/local/share/commonwl/`\n\n`$XDG_DATA_HOME/commonwl/` (usually `$HOME/.local/share/commonwl`)\n\n`$XDF_DATA_HOME` is from the [XDG Base Directory\nSpecification](http://standards.freedesktop.org/basedir-spec/basedir-spec-0.6.html)\n"
        ], 
        "type": "documentation", 
        "name": "https://w3id.org/cwl/cwl#WorkflowDoc"
    }, 
    {
        "type": "record", 
        "extends": "https://w3id.org/cwl/cwl#OutputParameter", 
        "name": "https://w3id.org/cwl/cwl#ExpressionToolOutputParameter", 
        "fields": [
            {
                "doc": "Specify valid types of data that may be assigned to this parameter.\n", 
                "jsonldPredicate": {
                    "refScope": 2, 
                    "_type": "@vocab", 
                    "_id": "https://w3id.org/cwl/salad#type", 
                    "typeDSL": true
                }, 
                "type": [
                    "null", 
                    "https://w3id.org/cwl/cwl#CWLType", 
                    "https://w3id.org/cwl/cwl#OutputRecordSchema", 
                    "https://w3id.org/cwl/cwl#OutputEnumSchema", 
                    "https://w3id.org/cwl/cwl#OutputArraySchema", 
                    "string", 
                    {
                        "items": [
                            "https://w3id.org/cwl/cwl#CWLType", 
                            "https://w3id.org/cwl/cwl#OutputRecordSchema", 
                            "https://w3id.org/cwl/cwl#OutputEnumSchema", 
                            "https://w3id.org/cwl/cwl#OutputArraySchema", 
                            "string"
                        ], 
                        "type": "array"
                    }
                ], 
                "name": "https://w3id.org/cwl/cwl#ExpressionToolOutputParameter/type"
            }
        ]
    }, 
    {
        "extends": "https://w3id.org/cwl/cwl#Process", 
        "name": "https://w3id.org/cwl/cwl#ExpressionTool", 
        "documentRoot": true, 
        "doc": "Execute an expression as a Workflow step.\n", 
        "specialize": [
            {
                "specializeFrom": "https://w3id.org/cwl/cwl#OutputParameter", 
                "specializeTo": "https://w3id.org/cwl/cwl#ExpressionToolOutputParameter"
            }
        ], 
        "type": "record", 
        "fields": [
            {
                "jsonldPredicate": {
                    "_type": "@vocab", 
                    "_id": "@type"
                }, 
                "type": "string", 
                "name": "https://w3id.org/cwl/cwl#ExpressionTool/class"
            }, 
            {
                "doc": "The expression to execute.  The expression must return a JSON object which\nmatches the output parameters of the ExpressionTool.\n", 
                "type": [
                    "string", 
                    "https://w3id.org/cwl/cwl#Expression"
                ], 
                "name": "https://w3id.org/cwl/cwl#ExpressionTool/expression"
            }
        ]
    }, 
    {
        "symbols": [
            "https://w3id.org/cwl/cwl#LinkMergeMethod/merge_nested", 
            "https://w3id.org/cwl/cwl#LinkMergeMethod/merge_flattened"
        ], 
        "doc": "The input link merge method, described in [WorkflowStepInput](#WorkflowStepInput).", 
        "docParent": "https://w3id.org/cwl/cwl#WorkflowStepInput", 
        "type": "enum", 
        "name": "https://w3id.org/cwl/cwl#LinkMergeMethod"
    }, 
    {
        "docParent": "https://w3id.org/cwl/cwl#Workflow", 
        "extends": "https://w3id.org/cwl/cwl#OutputParameter", 
        "name": "https://w3id.org/cwl/cwl#WorkflowOutputParameter", 
        "doc": "Describe an output parameter of a workflow.  The parameter must be\nconnected to one or more parameters defined in the workflow that will\nprovide the value of the output parameter.\n", 
        "fields": [
            {
                "doc": "Specifies one or more workflow parameters that supply the value of to\nthe output parameter.\n", 
                "jsonldPredicate": {
                    "refScope": 0, 
                    "_type": "@id", 
                    "_id": "https://w3id.org/cwl/cwl#outputSource"
                }, 
                "type": [
                    "null", 
                    "string", 
                    {
                        "items": "string", 
                        "type": "array"
                    }
                ], 
                "name": "https://w3id.org/cwl/cwl#WorkflowOutputParameter/outputSource"
            }, 
            {
                "doc": "The method to use to merge multiple sources into a single array.\nIf not specified, the default method is \"merge_nested\".\n", 
                "jsonldPredicate": "cwl:linkMerge", 
                "type": [
                    "null", 
                    "https://w3id.org/cwl/cwl#LinkMergeMethod"
                ], 
                "name": "https://w3id.org/cwl/cwl#WorkflowOutputParameter/linkMerge"
            }, 
            {
                "doc": "Specify valid types of data that may be assigned to this parameter.\n", 
                "jsonldPredicate": {
                    "refScope": 2, 
                    "_type": "@vocab", 
                    "_id": "https://w3id.org/cwl/salad#type", 
                    "typeDSL": true
                }, 
                "type": [
                    "null", 
                    "https://w3id.org/cwl/cwl#CWLType", 
                    "https://w3id.org/cwl/cwl#OutputRecordSchema", 
                    "https://w3id.org/cwl/cwl#OutputEnumSchema", 
                    "https://w3id.org/cwl/cwl#OutputArraySchema", 
                    "string", 
                    {
                        "items": [
                            "https://w3id.org/cwl/cwl#CWLType", 
                            "https://w3id.org/cwl/cwl#OutputRecordSchema", 
                            "https://w3id.org/cwl/cwl#OutputEnumSchema", 
                            "https://w3id.org/cwl/cwl#OutputArraySchema", 
                            "string"
                        ], 
                        "type": "array"
                    }
                ], 
                "name": "https://w3id.org/cwl/cwl#WorkflowOutputParameter/type"
            }
        ], 
        "type": "record"
    }, 
    {
        "fields": [
            {
                "doc": "Specifies one or more workflow parameters that will provide input to\nthe underlying step parameter.\n", 
                "jsonldPredicate": {
                    "refScope": 2, 
                    "_type": "@id", 
                    "_id": "https://w3id.org/cwl/cwl#source"
                }, 
                "type": [
                    "null", 
                    "string", 
                    {
                        "items": "string", 
                        "type": "array"
                    }
                ], 
                "name": "https://w3id.org/cwl/cwl#Sink/source"
            }, 
            {
                "doc": "The method to use to merge multiple inbound links into a single array.\nIf not specified, the default method is \"merge_nested\".\n", 
                "jsonldPredicate": "cwl:linkMerge", 
                "type": [
                    "null", 
                    "https://w3id.org/cwl/cwl#LinkMergeMethod"
                ], 
                "name": "https://w3id.org/cwl/cwl#Sink/linkMerge"
            }
        ], 
        "abstract": true, 
        "type": "record", 
        "name": "https://w3id.org/cwl/cwl#Sink"
    }, 
    {
        "docParent": "https://w3id.org/cwl/cwl#WorkflowStep", 
        "extends": "https://w3id.org/cwl/cwl#Sink", 
        "name": "https://w3id.org/cwl/cwl#WorkflowStepInput", 
        "doc": "The input of a workflow step connects an upstream parameter (from the\nworkflow inputs, or the outputs of other workflows steps) with the input\nparameters of the underlying step.\n\n## Input object\n\nA WorkflowStepInput object must contain an `id` field in the form\n`#fieldname` or `#stepname.fieldname`.  When the `id` field contains a\nperiod `.` the field name consists of the characters following the final\nperiod.  This defines a field of the workflow step input object with the\nvalue of the `source` parameter(s).\n\n## Merging\n\nTo merge multiple inbound data links,\n[MultipleInputFeatureRequirement](#MultipleInputFeatureRequirement) must be specified\nin the workflow or workflow step requirements.\n\nIf the sink parameter is an array, or named in a [workflow\nscatter](#WorkflowStep) operation, there may be multiple inbound data links\nlisted in the `source` field.  The values from the input links are merged\ndepending on the method specified in the `linkMerge` field.  If not\nspecified, the default method is \"merge_nested\".\n\n* **merge_nested**\n\n  The input must be an array consisting of exactly one entry for each\n  input link.  If \"merge_nested\" is specified with a single link, the value\n  from the link must be wrapped in a single-item list.\n\n* **merge_flattened**\n\n  1. The source and sink parameters must be compatible types, or the source\n     type must be compatible with single element from the \"items\" type of\n     the destination array parameter.\n  2. Source parameters which are arrays are concatenated.\n     Source parameters which are single element types are appended as\n     single elements.\n", 
        "fields": [
            {
                "doc": "A unique identifier for this workflow input parameter.", 
                "jsonldPredicate": "@id", 
                "type": "string", 
                "name": "https://w3id.org/cwl/cwl#WorkflowStepInput/id"
            }, 
            {
                "doc": "The default value for this parameter if there is no `source`\nfield.\n", 
                "jsonldPredicate": {
                    "_id": "https://w3id.org/cwl/cwl#default", 
                    "noLinkCheck": true
                }, 
                "type": [
                    "null", 
                    "Any"
                ], 
                "name": "https://w3id.org/cwl/cwl#WorkflowStepInput/default"
            }, 
            {
                "doc": "To use valueFrom, [StepInputExpressionRequirement](#StepInputExpressionRequirement) must\nbe specified in the workflow or workflow step requirements.\n\nIf `valueFrom` is a constant string value, use this as the value for\nthis input parameter.\n\nIf `valueFrom` is a parameter reference or expression, it must be\nevaluated to yield the actual value to be assiged to the input field.\n\nThe `self` value of in the parameter reference or expression must be\nthe value of the parameter(s) specified in the `source` field, or\nnull if there is no `source` field.\n\nThe value of `inputs` in the parameter reference or expression must be\nthe input object to the workflow step after assigning the `source`\nvalues and then scattering.  The order of evaluating `valueFrom` among\nstep input parameters is undefined and the result of evaluating\n`valueFrom` on a parameter must not be visible to evaluation of\n`valueFrom` on other parameters.\n", 
                "jsonldPredicate": "cwl:valueFrom", 
                "type": [
                    "null", 
                    "string", 
                    "https://w3id.org/cwl/cwl#Expression"
                ], 
                "name": "https://w3id.org/cwl/cwl#WorkflowStepInput/valueFrom"
            }
        ], 
        "type": "record"
    }, 
    {
        "doc": "Associate an output parameter of the underlying process with a workflow\nparameter.  The workflow parameter (given in the `id` field) be may be used\nas a `source` to connect with input parameters of other workflow steps, or\nwith an output parameter of the process.\n", 
        "docParent": "https://w3id.org/cwl/cwl#WorkflowStep", 
        "type": "record", 
        "name": "https://w3id.org/cwl/cwl#WorkflowStepOutput", 
        "fields": [
            {
                "doc": "A unique identifier for this workflow output parameter.  This is the\nidentifier to use in the `source` field of `WorkflowStepInput` to\nconnect the output value to downstream parameters.\n", 
                "jsonldPredicate": "@id", 
                "type": "string", 
                "name": "https://w3id.org/cwl/cwl#WorkflowStepOutput/id"
            }
        ]
    }, 
    {
        "symbols": [
            "https://w3id.org/cwl/cwl#ScatterMethod/dotproduct", 
            "https://w3id.org/cwl/cwl#ScatterMethod/nested_crossproduct", 
            "https://w3id.org/cwl/cwl#ScatterMethod/flat_crossproduct"
        ], 
        "doc": "The scatter method, as described in [workflow step scatter](#WorkflowStep).", 
        "docParent": "https://w3id.org/cwl/cwl#WorkflowStep", 
        "type": "enum", 
        "name": "https://w3id.org/cwl/cwl#ScatterMethod"
    }, 
    {
        "doc": "A workflow step is an executable element of a workflow.  It specifies the\nunderlying process implementation (such as `CommandLineTool` or another\n`Workflow`) in the `run` field and connects the input and output parameters\nof the underlying process to workflow parameters.\n\n# Scatter/gather\n\nTo use scatter/gather,\n[ScatterFeatureRequirement](#ScatterFeatureRequirement) must be specified\nin the workflow or workflow step requirements.\n\nA \"scatter\" operation specifies that the associated workflow step or\nsubworkflow should execute separately over a list of input elements.  Each\njob making up a scatter operation is independent and may be executed\nconcurrently.\n\nThe `scatter` field specifies one or more input parameters which will be\nscattered.  An input parameter may be listed more than once.  The declared\ntype of each input parameter is implicitly wrapped in an array for each\ntime it appears in the `scatter` field.  As a result, upstream parameters\nwhich are connected to scattered parameters may be arrays.\n\nAll output parameter types are also implicitly wrapped in arrays.  Each job\nin the scatter results in an entry in the output array.\n\nIf `scatter` declares more than one input parameter, `scatterMethod`\ndescribes how to decompose the input into a discrete set of jobs.\n\n  * **dotproduct** specifies that each of the input arrays are aligned and one\n      element taken from each array to construct each job.  It is an error\n      if all input arrays are not the same length.\n\n  * **nested_crossproduct** specifies the Cartesian product of the inputs,\n      producing a job for every combination of the scattered inputs.  The\n      output must be nested arrays for each level of scattering, in the\n      order that the input arrays are listed in the `scatter` field.\n\n  * **flat_crossproduct** specifies the Cartesian product of the inputs,\n      producing a job for every combination of the scattered inputs.  The\n      output arrays must be flattened to a single level, but otherwise listed in the\n      order that the input arrays are listed in the `scatter` field.\n\n# Subworkflows\n\nTo specify a nested workflow as part of a workflow step,\n[SubworkflowFeatureRequirement](#SubworkflowFeatureRequirement) must be\nspecified in the workflow or workflow step requirements.\n", 
        "docParent": "https://w3id.org/cwl/cwl#Workflow", 
        "type": "record", 
        "name": "https://w3id.org/cwl/cwl#WorkflowStep", 
        "fields": [
            {
                "doc": "The unique identifier for this workflow step.", 
                "jsonldPredicate": "@id", 
                "type": "string", 
                "name": "https://w3id.org/cwl/cwl#WorkflowStep/id"
            }, 
            {
                "doc": "Defines the input parameters of the workflow step.  The process is ready to\nrun when all required input parameters are associated with concrete\nvalues.  Input parameters include a schema for each parameter which is\nused to validate the input object.  It may also be used build a user\ninterface for constructing the input object.\n", 
                "jsonldPredicate": {
                    "_id": "https://w3id.org/cwl/cwl#in", 
                    "mapSubject": "id", 
                    "mapPredicate": "source"
                }, 
                "type": {
                    "items": "https://w3id.org/cwl/cwl#WorkflowStepInput", 
                    "type": "array"
                }, 
                "name": "https://w3id.org/cwl/cwl#WorkflowStep/in"
            }, 
            {
                "doc": "Defines the parameters representing the output of the process.  May be\nused to generate and/or validate the output object.\n", 
                "jsonldPredicate": {
                    "_type": "@id", 
                    "_id": "https://w3id.org/cwl/cwl#out", 
                    "identity": true
                }, 
                "type": [
                    {
                        "items": [
                            "string", 
                            "https://w3id.org/cwl/cwl#WorkflowStepOutput"
                        ], 
                        "type": "array"
                    }
                ], 
                "name": "https://w3id.org/cwl/cwl#WorkflowStep/out"
            }, 
            {
                "doc": "Declares requirements that apply to either the runtime environment or the\nworkflow engine that must be met in order to execute this workflow step.  If\nan implementation cannot satisfy all requirements, or a requirement is\nlisted which is not recognized by the implementation, it is a fatal\nerror and the implementation must not attempt to run the process,\nunless overridden at user option.\n", 
                "jsonldPredicate": {
                    "_id": "https://w3id.org/cwl/cwl#requirements", 
                    "mapSubject": "class"
                }, 
                "type": [
                    "null", 
                    {
                        "items": "https://w3id.org/cwl/cwl#ProcessRequirement", 
                        "type": "array"
                    }
                ], 
                "name": "https://w3id.org/cwl/cwl#WorkflowStep/requirements"
            }, 
            {
                "doc": "Declares hints applying to either the runtime environment or the\nworkflow engine that may be helpful in executing this workflow step.  It is\nnot an error if an implementation cannot satisfy all hints, however\nthe implementation may report a warning.\n", 
                "jsonldPredicate": {
                    "noLinkCheck": true, 
                    "_id": "https://w3id.org/cwl/cwl#hints", 
                    "mapSubject": "class"
                }, 
                "type": [
                    "null", 
                    {
                        "items": "Any", 
                        "type": "array"
                    }
                ], 
                "name": "https://w3id.org/cwl/cwl#WorkflowStep/hints"
            }, 
            {
                "doc": "A short, human-readable label of this process object.", 
                "jsonldPredicate": "rdfs:label", 
                "type": [
                    "null", 
                    "string"
                ], 
                "name": "https://w3id.org/cwl/cwl#WorkflowStep/label"
            }, 
            {
                "doc": "A long, human-readable description of this process object.", 
                "jsonldPredicate": "rdfs:comment", 
                "type": [
                    "null", 
                    "string"
                ], 
                "name": "https://w3id.org/cwl/cwl#WorkflowStep/doc"
            }, 
            {
                "doc": "Specifies the process to run.\n", 
                "jsonldPredicate": {
                    "_type": "@id", 
                    "_id": "https://w3id.org/cwl/cwl#run"
                }, 
                "type": [
                    "string", 
                    "https://w3id.org/cwl/cwl#Process"
                ], 
                "name": "https://w3id.org/cwl/cwl#WorkflowStep/run"
            }, 
            {
                "jsonldPredicate": {
                    "refScope": 0, 
                    "_type": "@id", 
                    "_id": "https://w3id.org/cwl/cwl#scatter", 
                    "_container": "@list"
                }, 
                "type": [
                    "null", 
                    "string", 
                    {
                        "items": "string", 
                        "type": "array"
                    }
                ], 
                "name": "https://w3id.org/cwl/cwl#WorkflowStep/scatter"
            }, 
            {
                "doc": "Required if `scatter` is an array of more than one element.\n", 
                "jsonldPredicate": {
                    "_type": "@vocab", 
                    "_id": "https://w3id.org/cwl/cwl#scatterMethod"
                }, 
                "type": [
                    "null", 
                    "https://w3id.org/cwl/cwl#ScatterMethod"
                ], 
                "name": "https://w3id.org/cwl/cwl#WorkflowStep/scatterMethod"
            }
        ]
    }, 
    {
        "extends": "https://w3id.org/cwl/cwl#Process", 
        "name": "https://w3id.org/cwl/cwl#Workflow", 
        "documentRoot": true, 
        "doc": "A workflow describes a set of **steps** and the **dependencies** between\nthose steps.  When a step produces output that will be consumed by a\nsecond step, the first step is a dependency of the second step.\n\nWhen there is a dependency, the workflow engine must execute the preceeding\nstep and wait for it to successfully produce output before executing the\ndependent step.  If two steps are defined in the workflow graph that\nare not directly or indirectly dependent, these steps are **independent**,\nand may execute in any order or execute concurrently.  A workflow is\ncomplete when all steps have been executed.\n\nDependencies between parameters are expressed using the `source` field on\n[workflow step input parameters](#WorkflowStepInput) and [workflow output\nparameters](#WorkflowOutputParameter).\n\nThe `source` field expresses the dependency of one parameter on another\nsuch that when a value is associated with the parameter specified by\n`source`, that value is propagated to the destination parameter.  When all\ndata links inbound to a given step are fufilled, the step is ready to\nexecute.\n\n## Workflow success and failure\n\nA completed step must result in one of `success`, `temporaryFailure` or\n`permanentFailure` states.  An implementation may choose to retry a step\nexecution which resulted in `temporaryFailure`.  An implementation may\nchoose to either continue running other steps of a workflow, or terminate\nimmediately upon `permanentFailure`.\n\n* If any step of a workflow execution results in `permanentFailure`, then\nthe workflow status is `permanentFailure`.\n\n* If one or more steps result in `temporaryFailure` and all other steps\ncomplete `success` or are not executed, then the workflow status is\n`temporaryFailure`.\n\n* If all workflow steps are executed and complete with `success`, then the\nworkflow status is `success`.\n\n# Extensions\n\n[ScatterFeatureRequirement](#ScatterFeatureRequirement) and\n[SubworkflowFeatureRequirement](#SubworkflowFeatureRequirement) are\navailable as standard [extensions](#Extensions_and_Metadata) to core\nworkflow semantics.\n", 
        "specialize": [
            {
                "specializeFrom": "https://w3id.org/cwl/cwl#OutputParameter", 
                "specializeTo": "https://w3id.org/cwl/cwl#WorkflowOutputParameter"
            }
        ], 
        "type": "record", 
        "fields": [
            {
                "jsonldPredicate": {
                    "_type": "@vocab", 
                    "_id": "@type"
                }, 
                "type": "string", 
                "name": "https://w3id.org/cwl/cwl#Workflow/class"
            }, 
            {
                "doc": "The individual steps that make up the workflow.  Each step is executed when all of its\ninput data links are fufilled.  An implementation may choose to execute\nthe steps in a different order than listed and/or execute steps\nconcurrently, provided that dependencies between steps are met.\n", 
                "jsonldPredicate": {
                    "mapSubject": "id"
                }, 
                "type": [
                    {
                        "items": "https://w3id.org/cwl/cwl#WorkflowStep", 
                        "type": "array"
                    }
                ], 
                "name": "https://w3id.org/cwl/cwl#Workflow/steps"
            }
        ]
    }, 
    {
        "type": "record", 
        "doc": "Indicates that the workflow platform must support nested workflows in\nthe `run` field of [WorkflowStep](#WorkflowStep).\n", 
        "extends": "https://w3id.org/cwl/cwl#ProcessRequirement", 
        "name": "https://w3id.org/cwl/cwl#SubworkflowFeatureRequirement", 
        "fields": [
            {
                "doc": "Always 'SubworkflowFeatureRequirement'", 
                "jsonldPredicate": {
                    "_type": "@vocab", 
                    "_id": "@type"
                }, 
                "type": "string", 
                "name": "https://w3id.org/cwl/cwl#SubworkflowFeatureRequirement/class"
            }
        ]
    }, 
    {
        "type": "record", 
        "doc": "Indicates that the workflow platform must support the `scatter` and\n`scatterMethod` fields of [WorkflowStep](#WorkflowStep).\n", 
        "extends": "https://w3id.org/cwl/cwl#ProcessRequirement", 
        "name": "https://w3id.org/cwl/cwl#ScatterFeatureRequirement", 
        "fields": [
            {
                "doc": "Always 'ScatterFeatureRequirement'", 
                "jsonldPredicate": {
                    "_type": "@vocab", 
                    "_id": "@type"
                }, 
                "type": "string", 
                "name": "https://w3id.org/cwl/cwl#ScatterFeatureRequirement/class"
            }
        ]
    }, 
    {
        "type": "record", 
        "doc": "Indicates that the workflow platform must support multiple inbound data links\nlisted in the `source` field of [WorkflowStepInput](#WorkflowStepInput).\n", 
        "extends": "https://w3id.org/cwl/cwl#ProcessRequirement", 
        "name": "https://w3id.org/cwl/cwl#MultipleInputFeatureRequirement", 
        "fields": [
            {
                "doc": "Always 'MultipleInputFeatureRequirement'", 
                "jsonldPredicate": {
                    "_type": "@vocab", 
                    "_id": "@type"
                }, 
                "type": "string", 
                "name": "https://w3id.org/cwl/cwl#MultipleInputFeatureRequirement/class"
            }
        ]
    }, 
    {
        "type": "record", 
        "doc": "Indicate that the workflow platform must support the `valueFrom` field\nof [WorkflowStepInput](#WorkflowStepInput).\n", 
        "extends": "https://w3id.org/cwl/cwl#ProcessRequirement", 
        "name": "https://w3id.org/cwl/cwl#StepInputExpressionRequirement", 
        "fields": [
            {
                "doc": "Always 'StepInputExpressionRequirement'", 
                "jsonldPredicate": {
                    "_type": "@vocab", 
                    "_id": "@type"
                }, 
                "type": "string", 
                "name": "https://w3id.org/cwl/cwl#StepInputExpressionRequirement/class"
            }
        ]
    }
]
